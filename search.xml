<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build Blog with Hexo and Github Page</title>
    <url>/2022/12/17/Build-my-Blog/</url>
    <content><![CDATA[<p>Powered by <a class="link" href="https://hexo.io/">Hexo<i class="fa-solid fa-up-right-from-square"></i></a>, deploied with <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a>. I first build and test on <a class="link" href="https://github.com/features/codespaces">Github Codespace<i class="fa-solid fa-up-right-from-square"></i></a>, but no long after, I run out of my 120 free hour. Thus I shift to my 256G M1 Mac(￣◇￣;). And there are some problems with codespace, which I will explain after.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol>
<li>Prepare <a class="link" href="https://github.com/">Git<i class="fa-solid fa-up-right-from-square"></i></a>, make sure you can pull and push.</li>
<li>Install <a class="link" href="https://nodejs.org/en/">Node.js<i class="fa-solid fa-up-right-from-square"></i></a>.</li>
<li>Set up <code>${username}.github.io</code> Repository, make it public.</li>
<li>Install <a class="link" href="https://hexo.io/">hexo<i class="fa-solid fa-up-right-from-square"></i></a>.</li>
<li>Find your favourite <a class="link" href="https://hexo.io/themes/">Theme<i class="fa-solid fa-up-right-from-square"></i></a> and follow the document to set up your blog. You can first test your website locally.</li>
<li>Depoly your Blog to with <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a></li>
</ol>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>As my blog is hosted on github, I believe anyone who have access to this website is familiar with git. Anyway, there are plenty of source address your problems with git. RTFM, STFW, :)</p>
<h2 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install <a class="link" href="https://nodejs.org/en/">Node.js<i class="fa-solid fa-up-right-from-square"></i></a></h2><p>Refer to <a class="link" href="https://nodejs.org/en/download/package-manager/">the guide<i class="fa-solid fa-up-right-from-square"></i></a> provided by Node.js.</p>
<p>I first setup my blog on codespace, where <a class="link" href="https://nodejs.org/en/">Node.js<i class="fa-solid fa-up-right-from-square"></i></a> is preinstalled with older version.</p>
<p>Then I installed <a class="link" href="https://nodejs.org/en/">Node.js<i class="fa-solid fa-up-right-from-square"></i></a> on my M1 Mac with commands below: (try to install nvm with <code>brew install nvm</code> will run into problems so I don’t recommend it)<br>Using <strong>Homebrew</strong>:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">brew install node</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="/opt/homebrew/opt/node@18/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>
<p>Don’t know why, mirror site for node.js returned error: 404, it took some time to downloads from default domain. I first the node version on website is node-19.3.0, but brew kept trying to downloads node-19.2.0, in the end, I down node@18.</p>
<p>After downloads, test with:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></div>

<h2 id="Setup-username-github-io"><a href="#Setup-username-github-io" class="headerlink" title="Setup ${username}.github.io"></a>Setup ${username}.github.io</h2><p>Follow <a class="link" href="https://pages.github.com/">the guide<i class="fa-solid fa-up-right-from-square"></i></a>, but don’t need to make your own index.html</p>
<h2 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install <a class="link" href="https://hexo.io/">hexo<i class="fa-solid fa-up-right-from-square"></i></a></h2><p>First make a new empty directory. If you want to put it to git repo, first pull the repo, and add a new empty directory.</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init <span class="variable">${new empty hexo-site-dir}</span></span><br></pre></td></tr></table></figure></div>
<p>then test your website locally</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>
<p>It’s now with the default theme and content, we will edit it in next step.</p>
<p>Before, we went next step, let’s first deploy it with <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a>.<br>In <code>_config.yml</code>, set up:</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">timezone:</span> <span class="string">'Aisa/Shanghai'</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com/&lt;username&gt;/${username.github.io}</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> </span><br><span class="line">  <span class="attr">message:</span> <span class="comment"># maybe commit message, I don't know</span></span><br></pre></td></tr></table></figure></div>
<p>After save, install package for deploy</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure></div>
<p>Before deploy, make sure your <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a>, and git push using <a class="link" href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">ssh<i class="fa-solid fa-up-right-from-square"></i></a> are both setup. Went to your hexo site repository and deploy with:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure></div>
<p>Then access your website from ${username}.github.io, you can first access your github repository to see if it has been build successfully.</p>
<h2 id="Problems-of-build-your-blog-with-codespace"><a href="#Problems-of-build-your-blog-with-codespace" class="headerlink" title="Problems of build your blog with codespace"></a>Problems of build your blog with codespace</h2><p>The point is that it seems your can’t pull and push to another repository from codespace opened for one repository. Which means you can’t put your <code>hexo-site</code> at codespace to deploy it to <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a>. To fix this problem, I first tried to put it under the ${username}.github.io, but then <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a> build failed when it read <code>_config.yml</code> for hexo. Then I have to add the hexo-site directory to <code>.gitignore</code>. And no long after, I nearly reach the end of my 120 free hour. In the end, I switch to my M1 Mac.</p>
<h2 id="Make-Blog-the-Way-You-Like"><a href="#Make-Blog-the-Way-You-Like" class="headerlink" title="Make Blog the Way You Like"></a>Make Blog the Way You Like</h2><p>I picked the <a class="link" href="https://hexo.io/themes/">Theme<i class="fa-solid fa-up-right-from-square"></i></a> <a class="link" href="https://redefine-docs.evanluo.top/">redefine<i class="fa-solid fa-up-right-from-square"></i></a>, choice your own theme and config it.<br>Install theme</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-redefine@latest</span><br></pre></td></tr></table></figure></div>
<p>change theme in <code>_config.yml</code></p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">redefine</span></span><br></pre></td></tr></table></figure></div>
<p>setup <a class="link" href="https://github.com/EvanNotFound/hexo-theme-redefine/blob/main/_config.yml">theme config file<i class="fa-solid fa-up-right-from-square"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> _config.redefine.yml</span><br></pre></td></tr></table></figure></div>
<p>please remember that social_contact is only available for brand.</p>
<h3 id="word-count"><a href="#word-count" class="headerlink" title="word_count"></a>word_count</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount</span><br></pre></td></tr></table></figure></div>

<h3 id="local-search"><a href="#local-search" class="headerlink" title="local_search"></a>local_search</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure></div>
<p>in <code>_config.redefine.yml</code> add:</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="comment">## See: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.json</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">striptags</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h3><p>Not yet set.</p>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mathjax</span><br></pre></td></tr></table></figure></div>
<p>in <code>_config.yml</code> add:</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">none</span>               <span class="comment"># or 'ams' or 'all'</span></span><br><span class="line">  <span class="attr">single_dollars:</span> <span class="literal">true</span>     <span class="comment"># enable single dollar signs as in-line math delimiters</span></span><br><span class="line">  <span class="attr">cjk_width:</span> <span class="number">0.9</span>           <span class="comment"># relative CJK char width</span></span><br><span class="line">  <span class="attr">normal_width:</span> <span class="number">0.6</span>        <span class="comment"># relative normal (monospace) width</span></span><br><span class="line">  <span class="attr">append_css:</span> <span class="literal">true</span>         <span class="comment"># add CSS to every page</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">true</span> <span class="comment"># if true, every page will be rendered by mathjax regardless the `mathjax` setting in Front-matter of each article</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Compress"><a href="#Compress" class="headerlink" title="Compress"></a>Compress</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-all-minifier</span><br></pre></td></tr></table></figure></div>
<p>I met unfixable venerablity after install this. Don’t recommend install.</p>
<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>Some error Happen<br>It’s fun when I test locally:<br><img lazyload="" src="/images/loading.svg" data-src="/fig/hexo_error_20221218_01.png" alt="error_01"><br>But error happened after I deployed it on <a class="link" href="https://pages.github.com/">Github Page<i class="fa-solid fa-up-right-from-square"></i></a><br><img lazyload="" src="/images/loading.svg" data-src="/fig/hexo_error_20221218_02.png" alt="error_02"></p>
<h2 id="Further-Learing"><a href="#Further-Learing" class="headerlink" title="Further Learing"></a>Further Learing</h2><p>Please refer to <a class="link" href="https://hexo.io/">Hexo<i class="fa-solid fa-up-right-from-square"></i></a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX</title>
    <url>/2022/12/17/LaTeX/</url>
    <content><![CDATA[<h2 id="Primary-Learning-Material"><a href="#Primary-Learning-Material" class="headerlink" title="Primary Learning Material"></a><a class="link" href="https://www.learnlatex.org/en/">Primary Learning Material<i class="fa-solid fa-up-right-from-square"></i></a></h2><h2 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h2><h3 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h3><p>Install with <a class="link" href="https://brew.sh/">Homebrew<i class="fa-solid fa-up-right-from-square"></i></a>:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mactex</span><br></pre></td></tr></table></figure></div>
<p>which include default editor <a class="link" href="https://pages.uoregon.edu/koch/texshop/">TeXShop<i class="fa-solid fa-up-right-from-square"></i></a><br><img lazyload="" src="/images/loading.svg" data-src="/fig/TeXShop.png" alt="TeXShop"><br>But it has poor support for autocomplete and syntax highlighting. Thus, I would recommend you config external Editor, [VS Code] for example:<br><img lazyload="" src="/images/loading.svg" data-src="/fig/VScode_TeX.png" alt="VS Code LaTeX"><br>will, it didn’t seem any better. (￣◇￣;)</p>
<h3 id="Overleaf"><a href="#Overleaf" class="headerlink" title="Overleaf"></a><a class="link" href="https://www.overleaf.com/">Overleaf<i class="fa-solid fa-up-right-from-square"></i></a></h3><p>It’s an online platform where you write <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> and typeset. It may not be the most elegant way, but easist.</p>
<h2 id="CTeX"><a href="#CTeX" class="headerlink" title="CTeX"></a>CTeX</h2><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>并不原生支持中文，我们用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>直接编译以下文本:</p>
<div class="highlight-container" data-rel="Tex"><figure class="iseeu highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">你好！</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure></div>
<p>编译无法通过，并会出现如下报错：</p>
<blockquote>
<p>./Untitled.tex:3: LaTeX Error: Unicode character 好 (U+597D) not set up for use with LaTeX.</p>
</blockquote>
<p>你可以使用CTeX宏包来解决以上问题</p>
<div class="highlight-container" data-rel="Tex"><figure class="iseeu highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\usepackage</span>[UTF8]{ctex}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">中文文档类测试。你需要将所有源文件保存为 UTF-8 编码。</span><br><span class="line">你可以使用 XeLaTeX、LuaLaTeX 或 upLaTeX 编译，也可以使用 (pdf)</span><br><span class="line">LaTeX 编译。 推荐使用 XeLaTeX 或 LuaLaTeX 编译。对高级用户，我</span><br><span class="line">们也推荐使用 upLaTeX 编译。</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure></div>
<p>或者</p>
<div class="highlight-container" data-rel="Latex"><figure class="iseeu highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]{ctexart}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">你好!</span><br><span class="line"><span class="keyword">\end</span>{end}</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>CTEX 宏集是面向中文排版的通用 LATEX 排版框架，为中文 LATEX 文档提供了汉字输出支持、 标点压缩、字体字号命令、标题文字汉化、中文版式调整、数字日期转换等支持功能，可适应论 文、报告、书籍、幻灯片等不同类型的中文文档。<br>CTEX 宏集支持 LATEX、pdfLATEX、XƎLATEX、LuaLATEX、upLATEX 等多种不同的编译方式，并为 它们提供了统一的界面。主要功能由宏包ctex以及中文文档类ctexart、ctexrep、ctexbook和 ctexbeamer 实现。</p>
</blockquote>
<p>你可以在<code>TeXShop -&gt; Help -&gt; Show Help for Package</code>输入CTeX，阅读<a class="link" href="https://mirrors.ibiblio.org/CTAN/language/chinese/ctex/ctex.pdf">CTeX宏集手册<i class="fa-solid fa-up-right-from-square"></i></a>。</p>
<h2 id="Useful-Packages"><a href="#Useful-Packages" class="headerlink" title="Useful Packages"></a><a class="link" href="https://ctex.org/documents/packages/layout/index.htm">Useful Packages<i class="fa-solid fa-up-right-from-square"></i></a></h2>]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
        <tag>CTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>ProgrammingLanguages.md</title>
    <url>/2023/06/13/ProgrammingLanguages-md/</url>
    <content><![CDATA[<p>I have learned several programming languages like C++(C11), Python3, Swift(5.8), and just started learning Rust. I have had a course on Java primarily for it’s Object-Oriented Programming but not write much code in Java. I also had a glimpse of JavaScript, write some shell script, I don’t remember if I have learned matlab, but I don’t like it and use python when ever possible to replace. (maybe Swift instead of Python months after, my work on <a class="link" href="https://github.com/meqtMac/MEQT">MEQT<i class="fa-solid fa-up-right-from-square"></i></a>)</p>
<p>In this Article, I want to talked about my understandings and experiences on <code>Compiled</code> and <code>Interpreted</code> Language, <code>Static-Typed</code> and <code>Dynamically-Typed</code> Language, and Script Language. </p>
<p>I also want to compared languages on performance, safety, user-friendly, how hard to start and how hard to learn, you know this could be two thing, capability, usage, programming paradims, syntax, maintainance, popularity, periphery tools like package manager, and environment manager.</p>
<p>The last thing I want to talk about how editor tools shift programming language’s syntax. I don’t know much about <a class="link" href="https://llvm.org/">LLVM<i class="fa-solid fa-up-right-from-square"></i></a>, but it’s greatly related to thest topics and brought a great change to all this thing, besides, LLVM has been awarded the <strong>2012 ACM Software System Award!</strong>. And <a class="link" href="https://en.wikipedia.org/wiki/Chris_Lattner">Chris Lattner<i class="fa-solid fa-up-right-from-square"></i></a> is co-founder of LLVM, Clang compiler, MLIR compiler infrastructure and the Swift programming language.</p>
<h1 id="Programming-languages"><a href="#Programming-languages" class="headerlink" title="Programming languages"></a>Programming languages</h1><p>Introduction:<br>Welcome to today’s video, where we’ll explore the essential programming languages for Computer Science (CS) or Electrical Engineering and Computer Science (EECS) majors. As a CS/EECS major, having a diverse knowledge of programming languages is crucial for tackling various projects and solving complex problems. In this video, we’ll cover the features, usage, and history of important languages, including C/C++, Python, Java, JavaScript, Rust, Go, TypeScript, Swift, Kotlin, Dart, HTML, CSS, Verilog, MATLAB, Assembly, SQL, LaTeX, Markdown, and Shell Script. Let’s dive in!</p>
<h2 id="Four-Old-Programming-Language-Still-Popular"><a href="#Four-Old-Programming-Language-Still-Popular" class="headerlink" title="Four Old Programming Language Still Popular"></a>Four Old Programming Language Still Popular</h2><h3 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C/C++:"></a>C/C++:</h3><p>C and C++ are foundational languages widely used in systems programming, embedded systems, and game development. They offer low-level control, high performance, and efficient memory management.</p>
<p>Features:</p>
<ul>
<li>Pointers for direct memory manipulation</li>
<li>Static typing for strong type checking</li>
<li>Compiled language for efficient execution</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span>* ptr = &amp;num; <span class="comment">// Pointer usage</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"The value of num: "</span> &lt;&lt; *ptr &lt;&lt; std::endl; <span class="comment">// Dereferencing the pointer</span></span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// Static typed variable</span></span><br><span class="line">  count++;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Count: "</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Java"><a href="#Java" class="headerlink" title="Java:"></a>Java:</h3><p>Java is a versatile, object-oriented language known for its platform independence, robustness, and large ecosystem of libraries and frameworks. It is used for enterprise-level applications, Android development, and building large-scale systems.</p>
<p>Features:</p>
<ul>
<li>Object-oriented programming paradigm</li>
<li>Interfaces for achieving abstraction and multiple inheritance</li>
<li>Inheritance for code reuse and polymorphism</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> {</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> {</span><br><span class="line">    System.out.println(<span class="string">"Woof!"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    myDog.sound();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python:"></a>Python:</h3><p>Python is a versatile language known for its simplicity, readability, and extensive library support. It is used in web development, data analysis, machine learning, and scientific computing.</p>
<p>Features:</p>
<ul>
<li>Numpy library for numerical computations and array manipulation</li>
<li>TensorFlow library for machine learning and deep learning</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Numpy usage</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Array:"</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow usage</span></span><br><span class="line">x = tf.constant(<span class="number">5</span>)</span><br><span class="line">y = tf.constant(<span class="number">3</span>)</span><br><span class="line">z = tf.add(x, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Result:"</span>, z)</span><br></pre></td></tr></table></figure></div>

<h2 id="Some-Newer-Languages"><a href="#Some-Newer-Languages" class="headerlink" title="Some Newer Languages"></a>Some Newer Languages</h2><h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust:"></a>Rust:</h3><p>Rust is a systems programming language that emphasizes safety, performance, and concurrency. It provides memory safety without sacrificing low-level control, making it suitable for developing secure and efficient software.</p>
<p>Features:</p>
<ul>
<li>Ownership system for managing memory and preventing data races</li>
<li>References for borrowing data without transferring ownership</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() {</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ref_num</span> = &amp;num; <span class="comment">// Reference</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mutable_ref</span> = &amp;<span class="keyword">mut</span> num; <span class="comment">// Mutable reference</span></span><br><span class="line"></span><br><span class="line">    *mutable_ref += <span class="number">5</span>; <span class="comment">// Modify value through mutable reference</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Value of num: {}"</span>, *ref_num);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Go"><a href="#Go" class="headerlink" title="Go:"></a>Go:</h3><p>Go, also known as Golang, is designed for simplicity, scalability, and concurrency. It excels in concurrent programming and is widely used in network programming, distributed systems, and cloud computing.</p>
<p>Features:</p>
<ul>
<li>Goroutines for lightweight concurrent execution</li>
<li>Channels for communication and synchronization between goroutines</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMessage</span><span class="params">(msg <span class="type">string</span>)</span></span> {</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ {</span><br><span class="line">		fmt.Println(msg)</span><br><span class="line">		time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="keyword">go</span> printMessage(<span class="string">"Hello"</span>)</span><br><span class="line">	<span class="keyword">go</span> printMessage(<span class="string">"World"</span>)</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript:"></a>TypeScript:</h3><p>TypeScript is a superset of JavaScript that adds static typing and additional features for large-scale applications. It helps catch errors during development and enables better tooling and code organization.</p>
<p>Features:</p>
<ul>
<li>Emphasis on strong typing and type annotations</li>
<li>Enhanced IDE support and code refactoring</li>
<li>Compatibility with existing JavaScript codebases</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> {</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="title function_">addNumbers</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Result:"</span>, result);</span><br></pre></td></tr></table></figure></div>

<h2 id="UI-Languages"><a href="#UI-Languages" class="headerlink" title="UI Languages"></a>UI Languages</h2><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift:"></a>Swift:</h3><p>Swift is a modern programming language developed by Apple for iOS, macOS, watchOS, and tvOS app development. It combines powerful features with a clean syntax and provides frameworks like SwiftUI for building intuitive user interfaces.</p>
<p>Features:</p>
<ul>
<li>SwiftUI for declarative UI development</li>
<li>Strong type inference and safety</li>
<li>Automatic memory management</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> {</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Hello, SwiftUI!"</span>)</span><br><span class="line">            .font(.largeTitle)</span><br><span class="line">            .foregroundColor(.blue)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin:"></a>Kotlin:</h3><p>Kotlin is a statically-typed language that runs on the Java Virtual Machine (JVM). It is officially supported for Android development and offers modern features, concise syntax, and seamless interoperability with existing Java code.</p>
<p>Features:</p>
<ul>
<li>Seamless integration with Java codebase</li>
<li>Android development support</li>
<li>Null safety and concise syntax</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart:"></a>Dart:</h3><p>Dart is a language developed by Google, commonly used for building mobile, web, and desktop applications. It is the primary language for developing Flutter applications, which allows for cross-platform development.</p>
<p>Features:</p>
<ul>
<li>Flutter framework for building cross-platform apps</li>
<li>Hot reload for fast development</li>
<li>Asynchronous programming support</li>
</ul>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() {</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>{</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Flutter App'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">'Hello, Flutter!'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h3><p>HTML is the standard markup language for creating web pages. It provides the structure and elements necessary for presenting content on the internet.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><p>CSS is a style sheet language used for describing the presentation and formatting of HTML documents. It allows you to style and design web pages, adding visual appeal and responsiveness.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> {</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Verilog"><a href="#Verilog" class="headerlink" title="Verilog:"></a>Verilog:</h3><p>Verilog is a hardware description language used for designing and simulating digital circuits. It is commonly used in digital design, FPGA programming, and ASIC development.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> AndGate(<span class="keyword">input</span> a, b, <span class="keyword">output</span> y);</span><br><span class="line">  <span class="keyword">assign</span> y = a &amp; b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div>

<h3 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB:"></a>MATLAB:</h3><p>MATLAB is a high-level programming language used for numerical computing, data analysis, and visualization. It provides a rich set of tools and libraries for mathematical operations and scientific research.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Matlab"><figure class="iseeu highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line">B = [<span class="number">9</span> <span class="number">8</span> <span class="number">7</span>; <span class="number">6</span> <span class="number">5</span> <span class="number">4</span>; <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">C = A * B;</span><br><span class="line"><span class="built_in">disp</span>(C);</span><br></pre></td></tr></table></figure></div>

<h3 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly:"></a>Assembly:</h3><p>Assembly language is a low-level programming language that provides a one-to-one correspondence between instructions and machine code. It is used for low-level programming, embedded systems, and optimizing critical code sections.</p>
<p>Code Snippet (x86 Assembly):</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">  mov eax, 4</span><br><span class="line">  mov ebx, 1</span><br><span class="line">  mov ecx, message</span><br><span class="line">  mov edx, 13</span><br><span class="line">  int 0x80</span><br><span class="line"></span><br><span class="line">  mov eax, 1</span><br><span class="line">  xor ebx, ebx</span><br><span class="line">  int 0x80</span><br><span class="line"></span><br><span class="line">section .data</span><br><span class="line">message db 'Hello, Assembly!', 0x0a</span><br></pre></td></tr></table></figure></div>

<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL:"></a>SQL:</h3><p>SQL (Structured Query Language) is used for managing relational databases. It allows the manipulation and retrieval of data, creation of tables, and performing various database operations.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  department <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (id, name, age, department)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'John Doe'</span>, <span class="number">30</span>, <span class="string">'IT'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">'IT'</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX:"></a>LaTeX:</h3><p>LaTeX is a typesetting system used for document preparation. It is widely used in academia, research, and scientific publications for producing professional-looking documents with complex mathematical formulas and structures.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Latex"><figure class="iseeu highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">  <span class="keyword">\section</span>{Introduction}</span><br><span class="line">  Hello, LaTeX!</span><br><span class="line"></span><br><span class="line">  <span class="keyword">\section</span>{Equations}</span><br><span class="line">  The quadratic formula is given by:</span><br><span class="line">  <span class="keyword">\[</span> x = <span class="keyword">\frac</span>{-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>{b<span class="built_in">^</span>2-4ac}}{2a} <span class="keyword">\]</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure></div>

<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown:"></a>Markdown:</h3><p>Markdown is a lightweight markup language used for creating formatted documents with minimal effort. It is commonly used for writing documentation, readme files, and online content.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Heading 1</span></span><br><span class="line"><span class="section">## Heading 2</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> List item 1</span><br><span class="line"><span class="bullet">-</span> List item 2</span><br><span class="line"></span><br><span class="line"><span class="strong">**Bold text**</span></span><br><span class="line"><span class="emphasis">*Italic text*</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script:"></a>Shell Script:</h3><p>Shell scripting allows automating tasks and running commands in a Unix/Linux shell environment. It is used for scripting repetitive tasks, managing files, and creating command-line tools.</p>
<p>Code Snippet:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello, Shell Scripting!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> {1..5}; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Iteration: <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div>

<p>Conclusion:<br>In this video, we covered the fundamental programming languages that every CS/EECS major should be familiar with. Each language has its unique features, use cases, and historical significance. By expanding your knowledge and proficiency in these languages, you’ll gain the skills necessary to excel in various domains of computer science and engineering.</p>
<p>Remember, the best way to learn a programming language is through practice and real-world applications</p>
<p>. So, pick a language that aligns with your interests and start exploring the vast possibilities it offers. Happy coding!</p>
<h2 id="Compiled-and-Interpreted-Languages-Static-Typed-and-Dynamically-Typed-Languages-and-Scripting-Languages"><a href="#Compiled-and-Interpreted-Languages-Static-Typed-and-Dynamically-Typed-Languages-and-Scripting-Languages" class="headerlink" title="Compiled and Interpreted Languages, Static-Typed and Dynamically-Typed Languages, and Scripting Languages"></a>Compiled and Interpreted Languages, Static-Typed and Dynamically-Typed Languages, and Scripting Languages</h2><p>In this article, I will share my insights and experiences regarding three important aspects of programming languages: compiled vs. interpreted, static-typed vs. dynamically-typed, and scripting languages. Understanding these concepts is essential for every aspiring programmer and can greatly influence the development process and overall code execution.</p>
<ol>
<li>Compiled vs. Interpreted Languages:<br>Compiled Languages:<br>Compiled languages, such as C/C++ and Rust, require a separate compilation step before execution. The source code is translated into machine code specific to the target platform using a compiler. The resulting compiled code is then executed directly by the computer’s processor.</li>
</ol>
<p>Key characteristics:</p>
<ul>
<li>Performance: Compiled languages often deliver faster performance due to direct execution of machine code.</li>
<li>Portability: Compiled code needs to be recompiled for different platforms.</li>
<li>Build process: Compilation involves translating the entire source code into an executable file.</li>
</ul>
<p>Interpreted Languages:<br>Interpreted languages, like Python and JavaScript, do not require a separate compilation step. The code is executed line by line by an interpreter at runtime. The interpreter translates and executes each statement on the fly.</p>
<p>Key characteristics:</p>
<ul>
<li>Portability: Interpreted languages are typically more portable as the interpreter can be run on different platforms without modification.</li>
<li>Development speed: Interpreted languages usually have faster development cycles as there is no need for compilation.</li>
<li>Performance: Interpreted languages may have slightly slower performance due to the interpreter’s overhead.</li>
</ul>
<ol start="2">
<li>Static-Typed vs. Dynamically-Typed Languages:<br>Static-Typed Languages:<br>Static-typed languages, such as Java and C#, require explicit declaration of variable types at compile-time. Once a variable is assigned a specific type, it cannot be changed. The compiler enforces type checking during the compilation process.</li>
</ol>
<p>Key characteristics:</p>
<ul>
<li>Early error detection: Static typing helps catch type-related errors at compile-time, reducing runtime errors.</li>
<li>Readability and documentation: Type annotations provide clarity and make code more self-documenting.</li>
<li>Performance optimization: Static typing allows for certain performance optimizations by the compiler.</li>
</ul>
<p>Dynamically-Typed Languages:<br>Dynamically-typed languages, like Python and JavaScript, do not require explicit type declarations. Variables are bound to values at runtime, and their types can change throughout the program’s execution.</p>
<p>Key characteristics:</p>
<ul>
<li>Flexibility: Dynamically-typed languages allow for more flexibility in terms of variable usage and type conversions.</li>
<li>Rapid prototyping: Dynamic typing enables quick prototyping and experimentation due to reduced overhead in type declarations.</li>
<li>Late error detection: Type-related errors may surface during runtime, which requires thorough testing and careful error handling.</li>
</ul>
<ol start="3">
<li>Scripting Languages:<br>Scripting languages, such as Perl and Ruby, are designed primarily for scripting tasks and automation. They often have simpler syntax, higher-level abstractions, and focus on ease of use and productivity.</li>
</ol>
<p>Key characteristics:</p>
<ul>
<li>Rapid development: Scripting languages prioritize fast development cycles and provide convenient features for automating tasks.</li>
<li>High-level abstractions: Scripting languages often offer built-in functions and libraries for common operations, reducing the need for low-level coding.</li>
<li>Interoperability: Many scripting languages are easily integratable with other systems and programming languages, allowing for seamless collaboration.</li>
</ul>
<p>Conclusion:<br>Understanding the differences between compiled and interpreted languages, static-typed and dynamically-typed languages, and the role of scripting languages is crucial for choosing the right tool for the task at hand. Each type has its own advantages and considerations regarding performance, development speed, and error detection. By expanding your knowledge in these areas, you’ll be better equipped to make informed decisions and write efficient, reliable code in your programming journey.</p>
<p>Remember, the choice of language ultimately depends on the project requirements, team preferences, and the problem you aim to solve. Experiment with different languages, explore their ecosystems, and keep learning to become a versatile and skilled programmer. Happy coding!</p>
<h2 id="Influence-of-IDE-on-languages"><a href="#Influence-of-IDE-on-languages" class="headerlink" title="Influence of IDE on languages"></a>Influence of IDE on languages</h2><p>The influence of Integrated Development Environments (IDEs) on programming languages, especially regarding static-typed and dynamically-typed languages, is significant. IDEs provide developers with a comprehensive set of tools and features that enhance productivity, code quality, and development experience. Let’s explore how IDEs impact these two types of programming languages:</p>
<ol>
<li>Static-Typed Languages:<br>IDEs play a crucial role in static-typed languages by leveraging their strong type systems and providing advanced features for type checking, code navigation, and refactoring.</li>
</ol>
<p>a. Type Checking:<br>IDEs for static-typed languages, such as Java or C#, often include sophisticated type checkers that analyze code and detect type-related errors during development. These type checkers highlight potential issues, such as incompatible assignments or incorrect method invocations, helping developers catch errors early on and maintain code integrity.</p>
<p>b. Code Navigation and Auto-completion:<br>IDEs assist developers in navigating through large codebases by offering features like code auto-completion and intelligent code suggestions. In static-typed languages, IDEs leverage type information to suggest available methods, properties, and variables, improving code efficiency and reducing the likelihood of syntax errors.</p>
<p>c. Refactoring:<br>Static-typed languages allow for extensive refactoring capabilities, thanks to their strong type systems. IDEs provide powerful refactoring tools that can rename variables, extract methods, rearrange code structures, and more. These tools ensure that the necessary changes are applied consistently throughout the codebase, reducing human error and improving maintainability.</p>
<ol start="2">
<li>Dynamically-Typed Languages:<br>IDEs for dynamically-typed languages, like Python or JavaScript, have also made significant progress in recent years, providing valuable features that assist developers in working with these languages effectively.</li>
</ol>
<p>a. Type Inference and Documentation:<br>Although dynamically-typed languages lack explicit type declarations, modern IDEs use advanced type inference algorithms to determine variable types. This helps provide accurate code suggestions and improves code navigation. Additionally, IDEs often integrate with type hinting systems (e.g., Python’s type hints) and offer inline documentation, enhancing code understanding and developer productivity.</p>
<p>b. Code Analysis and Debugging:<br>IDEs for dynamically-typed languages often include powerful code analysis and debugging tools. They can detect potential runtime errors, highlight common coding mistakes, and provide insights into the behavior of dynamic code. This helps developers identify issues early on and ensure robustness in their applications.</p>
<p>c. Test Framework Integration:<br>IDEs facilitate the integration of testing frameworks, allowing developers to write and execute tests directly within the IDE. This streamlined workflow improves the efficiency of testing dynamic code, enabling developers to iterate quickly and maintain code quality.</p>
<p>Overall, IDEs have a significant impact on both static-typed and dynamically-typed languages. They enhance the development experience, improve code quality, and enable developers to leverage the features and strengths of each language type effectively. Regardless of the language’s typing system, using a feature-rich IDE empowers developers to write cleaner, more maintainable code, and increases productivity throughout the development process.</p>
<h2 id="let-vs-Type"><a href="#let-vs-Type" class="headerlink" title="let vs. Type"></a>let vs. Type</h2><p>Modern programming languages often adopt the syntax of using type annotations, such as <code>let value: Double = 1.0</code>, instead of the traditional approach of <code>double v = 3.0</code> for several reasons:</p>
<ol>
<li><p>Readability and Clarity:<br>Using type annotations with variable declarations enhances code readability and clarity. By explicitly stating the variable type, it becomes easier for developers, including oneself and others, to understand the purpose and expected data type of a variable. This can greatly improve code comprehension and reduce ambiguity.</p>
</li>
<li><p>Self-Documenting Code:<br>Type annotations serve as a form of self-documentation within the code. By including the type directly in the variable declaration, it eliminates the need to search for variable type definitions elsewhere in the codebase. This can be especially helpful when working with larger projects or collaborating with other developers, as it provides immediate context and understanding of the variable’s intended type.</p>
</li>
<li><p>Early Error Detection:<br>Type annotations facilitate early error detection during compilation. When a variable is explicitly annotated with a specific type, the compiler can perform type checking and flag potential type-related errors before the code is executed. This helps catch issues early in the development process, reducing the likelihood of runtime errors and improving overall code robustness.</p>
</li>
<li><p>Tooling Support:<br>Modern IDEs and code editors often provide powerful code analysis and autocomplete features that rely on type annotations. With type annotations, the tooling can offer more accurate and context-aware suggestions, reducing the chances of introducing bugs or relying on incorrect assumptions about variable types.</p>
</li>
<li><p>Improved Maintainability:<br>Type annotations contribute to code maintainability by explicitly specifying the expected types. This can help in code maintenance and refactoring tasks, as changes to variable types can be accurately tracked and updated throughout the codebase. It also enables developers to identify potential type-related issues when modifying or extending existing code.</p>
</li>
<li><p>Language Flexibility:<br>By using type annotations, programming languages gain flexibility in terms of supporting different type systems, including static typing, type inference, and gradual typing. Type annotations allow languages to accommodate a wide range of coding styles and preferences while still providing the benefits of explicit type information.</p>
</li>
</ol>
<p>Overall, the adoption of type annotations in modern programming languages aims to improve code readability, catch errors early, enhance tooling support, and promote code maintainability. By providing explicit type information, developers can write more robust and self-explanatory code, leading to more efficient development and fewer unexpected issues down the line.</p>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>Let’s compare the usage of type annotations and the concept of constant or immutability in various programming languages, including C/C++, Java, Python, JavaScript, TypeScript, Go, Rust, Swift, Kotlin, and Dart.</p>
<ol>
<li>C/C++:<br>Without explicit type:<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div>

<p>C and C++ are statically-typed languages, where the type of a variable is explicitly declared. The language does not have built-in support for type annotations, and the programmer is responsible for explicitly specifying the types. C++ introduces the <code>auto</code> keyword and <code>decltype</code> specifier for type inference.</p>
<ol start="2">
<li>Java:<br>Without explicit type:<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div>

<p>Java is also a statically-typed language, and variable types must be explicitly declared. Java does not support type inference or type annotations in the same way as newer languages.</p>
<ol start="3">
<li>Python:<br>Without type hinting:<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">5</span></span><br><span class="line">pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With type hinting:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num: <span class="built_in">int</span> = <span class="number">5</span></span><br><span class="line">pi: <span class="built_in">float</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>Python is a dynamically-typed language that traditionally does not require explicit type annotations. However, starting from Python 3.5, it introduced optional type hinting through type annotations using the <code>:</code> syntax. Type hinting helps with code readability and static analysis but is not enforced at runtime.</p>
<ol start="4">
<li>JavaScript:<br>Without explicit type:<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type (TypeScript):</p>
<div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pi</span>: <span class="built_in">number</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div>

<p>JavaScript is also a dynamically-typed language, and variable types are not explicitly declared. However, with the introduction of TypeScript, a statically-typed superset of JavaScript, explicit type annotations can be used to provide type information for variables.</p>
<ol start="5">
<li>TypeScript:<br>Without explicit type:<div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pi</span>: <span class="built_in">number</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div>

<p>TypeScript is a statically-typed language and requires explicit type annotations for variables. It extends JavaScript by adding optional static typing, allowing developers to catch type-related errors during development.</p>
<ol start="6">
<li>Go:<br>Without explicit type:<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="number">5</span></span><br><span class="line">pi := <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> pi <span class="type">float64</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>Go supports type inference, allowing variables to be declared without explicitly mentioning the type. The type is inferred based on the assigned value. However, explicit type declarations can be used for clarity or when type inference is not desired.</p>
<ol start="7">
<li>Rust:<br>Without explicit type:<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">num</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">pi</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">num</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">pi</span>: <span class="type">f64</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div>

<p>Rust supports type inference similar to Go, where variables can be declared without explicitly mentioning the type. However, explicit type annotations can be used when desired.</p>
<ol start="8">
<li>Swift:<br>Without explicit type:<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> pi <span class="operator">=</span> <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="type">Int</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pi: <span class="type">Double</span> <span class="operator">=</span> <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>Swift supports type inference, and variables can be declared without explicitly mentioning the type. However, explicit type annotations can be used for clarity or when type inference is not desired.</p>
<ol start="9">
<li>Kotlin:<br>Without explicit type:<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num = <span class="number">5</span></span><br><span class="line"><span class="keyword">val</span> pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num: <span class="built_in">Int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">val</span> pi: <span class="built_in">Double</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>Kotlin, like Swift, supports type inference and allows variables to be declared without explicitly mentioning the type. However, explicit type annotations can be used when needed.</p>
<ol start="10">
<li>Dart:<br>Without explicit type:<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>With explicit type:</p>
<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">double</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></div>

<p>Dart supports type inference, and variables can be declared without explicitly mentioning the type. However, explicit type annotations can be used for clarity or when type inference is not desired.</p>
<p>Regarding the concept of constant or immutability, each language has its own way of defining and enforcing immutability, such as using <code>const</code> or <code>val</code> keywords. These keywords indicate that the value of a variable cannot be changed once assigned. The usage and syntax for constants or immutability may vary between languages, but the concept generally serves to ensure data integrity and improve code reliability by preventing unintentional modifications to variables.</p>
<h2 id="Mutability-and-Immutability"><a href="#Mutability-and-Immutability" class="headerlink" title="Mutability and Immutability"></a>Mutability and Immutability</h2><p>Certainly! Let’s explore examples of mutability and immutability in variables and function parameters in various programming languages:</p>
<ol>
<li><p>C/C++:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> mutableVariable = <span class="number">5</span>; <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> immutableVariable = <span class="number">10</span>; <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">mutableFunction</span><span class="params">(<span class="type">int</span> mutableParam)</span> { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">immutableFunction</span><span class="params">(<span class="type">const</span> <span class="type">int</span> immutableParam)</span> { <span class="comment">// Immutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Java:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">mutableVariable</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">immutableVariable</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">mutableFunction</span><span class="params">(<span class="type">int</span> mutableParam)</span> { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">immutableFunction</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> immutableParam)</span> { <span class="comment">// Immutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Python:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">mutableVariable = <span class="number">5</span>  <span class="comment"># Mutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mutable_function</span>(<span class="params">mutable_param</span>):  <span class="comment"># Mutable parameter</span></span><br><span class="line">    <span class="comment"># Code here</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>JavaScript:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mutableVariable = <span class="number">5</span>; <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">const</span> immutableVariable = <span class="number">10</span>; <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mutableFunction</span>(<span class="params">mutableParam</span>) { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>TypeScript:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mutableVariable</span>: <span class="built_in">number</span> = <span class="number">5</span>; <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">immutableVariable</span>: <span class="built_in">number</span> = <span class="number">10</span>; <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mutableFunction</span>(<span class="params">mutableParam: <span class="built_in">number</span></span>) { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Go:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mutableVariable <span class="type">int</span> = <span class="number">5</span> <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">const</span> immutableVariable <span class="type">int</span> = <span class="number">10</span> <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mutableFunction</span><span class="params">(mutableParam <span class="type">int</span>)</span></span> { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Rust:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">mutable_variable</span> = <span class="number">5</span>; <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">immutable_variable</span> = <span class="number">10</span>; <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">mutable_function</span>(mutable_param: <span class="keyword">mut</span> <span class="type">i32</span>) { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">immutable_function</span>(immutable_param: <span class="type">i32</span>) { <span class="comment">// Immutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Kotlin:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mutableVariable = <span class="number">5</span> <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">val</span> immutableVariable = <span class="number">10</span> <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mutableFunction</span><span class="params">(mutableParam: <span class="type">Int</span>)</span></span> { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Swift:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mutableVariable <span class="operator">=</span> <span class="number">5</span> <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">let</span> immutableVariable <span class="operator">=</span> <span class="number">10</span> <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">mutableFunction</span>(<span class="params">mutableParam</span>: <span class="type">Int</span>) { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"> <span class="type">Code</span> here</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">immutableFunction</span>(<span class="params">immutableParam</span>: <span class="keyword">inout</span> <span class="type">Int</span>) { <span class="comment">// Immutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Dart:<br>Variable mutability:</p>
<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mutableVariable = <span class="number">5</span>; <span class="comment">// Mutable variable</span></span><br><span class="line"><span class="keyword">final</span> immutableVariable = <span class="number">10</span>; <span class="comment">// Immutable variable</span></span><br></pre></td></tr></table></figure></div>
<p>Function parameter mutability:</p>
<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> mutableFunction(<span class="keyword">var</span> mutableParam) { <span class="comment">// Mutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> immutableFunction(<span class="keyword">final</span> immutableParam) { <span class="comment">// Immutable parameter</span></span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>In each of these languages, mutable variables can be reassigned or modified, whereas immutable variables cannot be changed after their initial assignment. Similarly, mutable function parameters can be modified within the function, while immutable function parameters are read-only and cannot be modified within the function body. The syntax and keywords used to denote immutability may vary between languages, but the concept remains consistent.</p>
]]></content>
      <tags>
        <tag>Swift, Rust, Python, C++, Xcode, Programmings</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftRegex</title>
    <url>/2023/06/24/SwiftRegex/</url>
    <content><![CDATA[<h1 id="Regex-Demo"><a href="#Regex-Demo" class="headerlink" title="Regex Demo"></a>Regex Demo</h1><p>This is a recap of WWDC’s Swift </p>
<p>@Metadata {<br>    @CallToAction(<br>       purpose: link,<br>       url: “<a class="link" href="https://developer.apple.com/wwdc22/110357">https://developer.apple.com/wwdc22/110357<i class="fa-solid fa-up-right-from-square"></i></a>“)<br>}</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a class="link" href="https://developer.apple.com/wwdc22/110357">Meet Swift Regex<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://developer.apple.com/wwdc22/110358">Swift Regex: Beyond the basics<i class="fa-solid fa-up-right-from-square"></i></a></li>
</ul>
<h3 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h3><h4 id="Regex-and-Regex-Builder"><a href="#Regex-and-Regex-Builder" class="headerlink" title="Regex and Regex Builder"></a>Regex and Regex Builder</h4><p>Regex is <code>Swift Standard Library</code> build in Type.<br>@Row {<br>    @Column{</p>
<pre><code><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RegexBuilder</span><br><span class="line"><span class="comment">// Regex Builder</span></span><br><span class="line"><span class="type">Regex</span> {</span><br><span class="line">    <span class="string">"Hi, WWDC"</span></span><br><span class="line">    <span class="type">Repeat</span>(.digit, count: <span class="number">2</span>)</span><br><span class="line">    <span class="string">"!"</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
}

@Column {
    <div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// regex literial</span></span><br><span class="line"><span class="keyword">let</span> regex <span class="operator">=</span> <span class="operator">/</span>user_id:\s<span class="operator">*</span>(\d<span class="operator">+</span>)<span class="operator">/</span></span><br><span class="line"><span class="comment">// Regex</span></span><br><span class="line"><span class="keyword">let</span> regex2 <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Regex</span>(<span class="string">#"user_id:\s*(\d+)"#</span>)</span><br></pre></td></tr></table></figure></div>
}
</code></pre>
<p>}</p>
<p>@TabNavigator {<br>    @Tab(“Regex Builder”) {<br>        <div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RegexBuilder</span><br><span class="line"><span class="comment">// Regex Builder</span></span><br><span class="line"><span class="type">Regex</span> {</span><br><span class="line">    <span class="string">"Hi, WWDC"</span></span><br><span class="line">    <span class="type">Repeat</span>(.digit, count: <span class="number">2</span>)</span><br><span class="line">    <span class="string">"!"</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><br>    }</p>
<pre><code>@Tab("Regex Literial")  {
    <div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// regex literial</span></span><br><span class="line"><span class="keyword">let</span> regex <span class="operator">=</span> <span class="operator">/</span>user_id:\s<span class="operator">*</span>(\d<span class="operator">+</span>)<span class="operator">/</span></span><br></pre></td></tr></table></figure></div>
}
    
@Tab("From String") {
    <div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Regex</span></span><br><span class="line"><span class="keyword">let</span> regex2 <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Regex</span>(<span class="string">#"user_id:\s*(\d+)"#</span>)</span><br></pre></td></tr></table></figure></div>
}
</code></pre>
<p>}</p>
<h3 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h3><ul>
<li><code>firstMatch</code></li>
<li><code>wholeMatch</code></li>
<li><code>prefixMatch</code></li>
<li><code>start(with: )</code></li>
<li><code>replacing(regex, with: )</code></li>
<li><code>trimmingPrefix()</code></li>
<li><code>split(separator: Regex)</code></li>
<li><code>switch case Regex: </code></li>
</ul>
<p>Demo</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> input <span class="operator">=</span> <span class="string">"name:  John Appleseed,  user_id:  100"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex <span class="operator">=</span> <span class="type">Regex</span>{</span><br><span class="line">    <span class="string">"user_id:"</span></span><br><span class="line">    <span class="type">ZeroOrMore</span>(.whitespace)</span><br><span class="line">    <span class="type">Capture</span>{</span><br><span class="line">        <span class="type">OneOrMore</span>(.digit)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> match <span class="operator">=</span> input.firstMatch(of: regex) {</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Matched: <span class="subst">\(match.<span class="number">0</span>)</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"User ID: <span class="subst">\(match.<span class="number">1</span>)</span>"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"wholeMatch:"</span>, input.wholeMatch(of: regex))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"prefixMatch"</span>,input.prefixMatch(of: regex))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"starts:"</span>, input.starts(with: regex))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"replacing:"</span>, input.replacing(regex, with: <span class="string">"456"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"trimming:"</span>, input.trimmingPrefix(regex))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regexSplitter <span class="operator">=</span> <span class="type">Regex</span>{</span><br><span class="line">    <span class="type">ZeroOrMore</span>(.whitespace)</span><br><span class="line">    <span class="string">","</span></span><br><span class="line">    <span class="type">ZeroOrMore</span>(.whitespace)</span><br><span class="line">}</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"split"</span>, input.split(separator:regexSplitter))</span><br></pre></td></tr></table></figure></div>
<p>Result</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Matched: user_id:  100</span><br><span class="line">User ID: 100</span><br><span class="line">wholeMatch: nil</span><br><span class="line">prefixMatch nil</span><br><span class="line">starts: false</span><br><span class="line">replacing: name:  John Appleseed,  456</span><br><span class="line">trimming: name:  John Appleseed,  user_id:  100</span><br><span class="line">split ["name:  John Appleseed", "user_id:  100"]</span><br></pre></td></tr></table></figure></div>

<h3 id="Regex-support-in-Foundation"><a href="#Regex-support-in-Foundation" class="headerlink" title="Regex support in Foundation"></a>Regex support in Foundation</h3><p>Inorder to use Foundation’s default parser, you need to include <code>Foundation</code></p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> RegexBuilder</span><br><span class="line"><span class="comment">//MARK: TestSuite Example</span></span><br><span class="line"><span class="keyword">let</span> funcNameRegex <span class="operator">=</span> <span class="type">Regex</span> {</span><br><span class="line">    <span class="type">CharacterClass</span>(<span class="string">"a"</span><span class="operator">...</span><span class="string">"z"</span>, <span class="string">"A"</span><span class="operator">...</span><span class="string">"Z"</span>)</span><br><span class="line">    <span class="type">ZeroOrMore</span>{</span><br><span class="line">        <span class="type">CharacterClass</span>(<span class="string">"a"</span><span class="operator">...</span><span class="string">"z"</span>, <span class="string">"A"</span><span class="operator">...</span><span class="string">"Z"</span>, <span class="string">"0"</span><span class="operator">...</span><span class="string">"9"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">TestResult</span>: <span class="title class_">String</span> {</span><br><span class="line">    <span class="keyword">case</span> started</span><br><span class="line">    <span class="keyword">case</span> passed</span><br><span class="line">    <span class="keyword">case</span> failed</span><br><span class="line">    <span class="keyword">case</span> unknown</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testRegex <span class="operator">=</span> <span class="type">Regex</span>{</span><br><span class="line">    <span class="string">"Test Suite '"</span></span><br><span class="line">    <span class="type">Capture</span>(funcNameRegex)</span><br><span class="line">    <span class="string">"' "</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">TryCapture</span>{</span><br><span class="line">        <span class="type">ChoiceOf</span> {</span><br><span class="line">            <span class="string">"started"</span></span><br><span class="line">            <span class="string">"passed"</span></span><br><span class="line">            <span class="string">"failed"</span></span><br><span class="line">        }</span><br><span class="line">    } transform: {</span><br><span class="line">        <span class="keyword">return</span> <span class="type">TestResult</span>(rawValue: <span class="type">String</span>(<span class="variable">$0</span>))</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="string">" at "</span></span><br><span class="line">    <span class="type">Capture</span>(</span><br><span class="line">        .iso8601(timeZone: .current,</span><br><span class="line">                 includingFractionalSeconds: <span class="literal">true</span>,</span><br><span class="line">                 dateTimeSeparator: .space)</span><br><span class="line">    )</span><br><span class="line">    <span class="type">Optionally</span>(<span class="string">"."</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testSuiteTestInputs <span class="operator">=</span> [</span><br><span class="line">    <span class="string">"Test Suite 'RegexDSLTests' started at 2022-06-06 09:41:00.001"</span>,</span><br><span class="line">    <span class="string">"Test Suite 'RegexDSLTests' failed at 2022-06-06 09:41:00.001."</span>,</span><br><span class="line">    <span class="string">"Test Suite 'RegexDSLTests' passed at 2022-06-06 09:41:00.001."</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> testSuiteTestInputs {</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> (<span class="keyword">_</span>, name, status, date) <span class="operator">=</span> line.wholeMatch(of: testRegex)<span class="operator">?</span>.output {</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Matched: "</span>, name, status, date, separator: <span class="string">", "</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Reuse-an-existing-parser"><a href="#Reuse-an-existing-parser" class="headerlink" title="Reuse an existing parser"></a>Reuse an existing parser</h3><p><code>strtod</code> C function</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MARK: reuse an existing parser</span></span><br><span class="line"><span class="keyword">import</span> Darwin</span><br><span class="line"><span class="keyword">import</span> RegexBuilder</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CDoubleParser</span>: <span class="title class_">CustomConsumingRegexComponent</span> {</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">RegexOutput</span> <span class="operator">=</span> <span class="type">Double</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">consuming</span>(</span><br><span class="line">        <span class="keyword">_</span> <span class="params">input</span>: <span class="type">String</span>,</span><br><span class="line">        <span class="params">startingAt</span> <span class="params">index</span>: <span class="type">String</span>.<span class="type">Index</span>,</span><br><span class="line">        <span class="params">in</span> <span class="params">bounds</span>: <span class="type">Range</span>&lt;<span class="type">String</span>.<span class="type">Index</span>&gt;) <span class="keyword">throws</span> -&gt; (upperBound: <span class="type">String</span>.<span class="type">Index</span>, output: <span class="type">Double</span>)<span class="operator">?</span> {</span><br><span class="line">            input[index<span class="operator">...</span>].withCString { startAddress <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">var</span> endAddress: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CChar</span>&gt;!</span><br><span class="line">                <span class="keyword">let</span> output <span class="operator">=</span> strtod(startAddress, <span class="operator">&amp;</span>endAddress)</span><br><span class="line">                <span class="keyword">guard</span> endAddress <span class="operator">&gt;</span> startAddress <span class="keyword">else</span> {<span class="keyword">return</span> <span class="literal">nil</span>}</span><br><span class="line">                <span class="keyword">let</span> parsedLength <span class="operator">=</span> startAddress.distance(to: endAddress)</span><br><span class="line">                <span class="keyword">let</span> upperBound <span class="operator">=</span> input.utf8.index(index, offsetBy: parsedLength )</span><br><span class="line">                <span class="keyword">return</span> (upperBound, output)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testCaseWithDurationInput <span class="operator">=</span> <span class="string">"Test Case '-[RegexDSLTests testCharacterClass]' passed (0.001 seconds)."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testCaseWithDurationRegex <span class="operator">=</span> <span class="type">Regex</span> {</span><br><span class="line">    <span class="string">"Test Case "</span></span><br><span class="line">    <span class="type">OneOrMore</span>(.any, .reluctant)</span><br><span class="line">    <span class="string">"("</span></span><br><span class="line">    <span class="type">Capture</span> {</span><br><span class="line">        <span class="type">CDoubleParser</span>()</span><br><span class="line">    }</span><br><span class="line">    <span class="string">" seconds)."</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> match <span class="operator">=</span> testCaseWithDurationInput.wholeMatch(of: testCaseWithDurationRegex) {</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Time: <span class="subst">\(match.<span class="number">1</span>)</span>"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Time: 0.001 </span></span><br></pre></td></tr></table></figure></div>


]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fa-solid fa-up-right-from-square"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fa-solid fa-up-right-from-square"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fa-solid fa-up-right-from-square"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fa-solid fa-up-right-from-square"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fa-solid fa-up-right-from-square"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fa-solid fa-up-right-from-square"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fa-solid fa-up-right-from-square"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo d -g</span><br><span class="line"><span class="comment"># if there is an error message: Automatic merge failed; fix conflicts and then commit the result. you can run the following code</span></span><br><span class="line">git pull origin main --allow-unrelated-histories</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fa-solid fa-up-right-from-square"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Rust, Swift and C++</title>
    <url>/2023/06/07/RustVsSwift/</url>
    <content><![CDATA[<p>A simple Comparsion on Swift, Rust, C++’s syntax as a beginner on Rust after learning some swift and C/C++. Three static-typed, compiled programming language .</p>
<p>Besides, as swift 5.9 comes with <a href="https://www.swift.org/documentation/cxx-interop/">C++ <strong>inter</strong>operability</a> support I think it would be a good source to learn some C++ and Swift relationship and comparision.</p>
<h2 id="Value-and-Types"><a href="#Value-and-Types" class="headerlink" title="Value and Types"></a>Value and Types</h2><p>It’s infact impossible to talk about value, without talking about how do functions, closure, structure, class, and ARC d</p>
<h3 id="Swift-value-basics"><a href="#Swift-value-basics" class="headerlink" title="Swift value basics"></a>Swift value basics</h3><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> y <span class="operator">=</span> x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(x)</span>, <span class="subst">\(y)</span>"</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="Rust-with-owership"><a href="#Rust-with-owership" class="headerlink" title="Rust with owership"></a>Rust with owership</h3><p>After I write this code, I believe rust should be safer and faster with it’s ownership, reference and borrowing.</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() {</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">y</span> = x;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">z</span> = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rx1</span> = &amp;x;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rx2</span> = &amp;x;</span><br><span class="line">    <span class="comment">/*   error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable</span></span><br><span class="line"><span class="comment">        let rx3 = &amp;mut x;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ry1</span> = &amp;y;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ry2</span> = &amp;y;</span><br><span class="line">    <span class="comment">/* error[E0502]: cannot borrow `y` as mutable because it is also borrowed as immutable</span></span><br><span class="line"><span class="comment">        let ry_err = &amp;mut y;</span></span><br><span class="line"><span class="comment">        println!("{}, {}, {}", ry1, ry2, ry_err);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"{}, {}"</span>, ry1, ry2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rz1</span> = &amp;<span class="keyword">mut</span> z;</span><br><span class="line">    <span class="comment">/* error[E0499]: cannot borrow `z` as mutable more than once at a time</span></span><br><span class="line"><span class="comment">        let rz2 = &amp;mut z;</span></span><br><span class="line"><span class="comment">        println!("{}, {}", rz1, rz2);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h3 id="Swift-Memory-Operation"><a href="#Swift-Memory-Operation" class="headerlink" title="Swift Memory Operation"></a>Swift Memory Operation</h3><p>while in swift you don’t expecilitly have a reference for what ever value you want, but class, and ARC is a thing to talk about.</p>
<p>Someone said that swift don’t have directly access to Memory which makes it slower. I don’t know if it’s becaused my misundering, though uncommon, but we have for array:</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>]</span><br><span class="line"> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">withUnsafeMutableBufferPointer</span>&lt;<span class="type">R</span>&gt;(<span class="keyword">_</span> <span class="params">body</span>: (<span class="keyword">inout</span> <span class="type">UnsafeMutableBufferPointer</span>&lt;<span class="type">Element</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">R</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">R</span></span><br><span class="line">arr.withUnsafeMutableBufferPointer { ptr <span class="keyword">in</span></span><br><span class="line">    <span class="operator">&lt;</span>#code#<span class="operator">&gt;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> constArr <span class="operator">=</span> [<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">1000</span>]</span><br><span class="line">constArr.withUnsafeBufferPointer { ptr <span class="keyword">in</span></span><br><span class="line">    <span class="operator">&lt;</span>#code#<span class="operator">&gt;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">withUnsafeBufferPointer</span>&lt;<span class="type">R</span>&gt;(<span class="keyword">_</span> <span class="params">body</span>: (<span class="type">UnsafeBufferPointer</span>&lt;<span class="type">Element</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">R</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">R</span></span><br></pre></td></tr></table></figure></div>

<p>and </p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: arr) { ptr <span class="keyword">in</span></span><br><span class="line">    <span class="operator">&lt;</span>#code#<span class="operator">&gt;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mutableArr <span class="operator">=</span> [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="built_in">withUnsafeMutablePointer</span>(to: <span class="operator">&amp;</span>mutableArr) { ptr <span class="keyword">in</span></span><br><span class="line">    <span class="operator">&lt;</span>#code#<span class="operator">&gt;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>Nothat these ptr are different, one is type method for array, with <code>BufferPointer</code>; and another is Generic function and <code>Pointer</code>.<br>This is not talked about in <a class="link" href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/">Swift Programming Language<i class="fa-solid fa-up-right-from-square"></i></a>, but have a detailed explaination in <a class="link" href="https://developer.apple.com/documentation/swift/manual-memory-management">Standard Library Documentation<i class="fa-solid fa-up-right-from-square"></i></a></p>
<p>These function would be helpful when coping with c code. But if not, you may not ever see these code in swift. Anyway, it’s a big topic, but a glimpses of it makes me have a better understanding of swift programming language. And I hope this would be helpful for anyone learn these language.</p>
<h3 id="stored-property-calculated-property-and-property-observer"><a href="#stored-property-calculated-property-and-property-observer" class="headerlink" title="stored property, calculated property, and property observer."></a>stored property, calculated property, and property observer.</h3><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stored: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span>  {</span><br><span class="line">    <span class="keyword">willSet</span> {</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">didSet</span> {</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getOnlyComputedValue: <span class="type">Int</span> {</span><br><span class="line">    <span class="keyword">get</span> {</span><br><span class="line">        <span class="keyword">return</span> stored</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// var getOnlyComputedValue: Int {</span></span><br><span class="line"><span class="comment">//  stored</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> settableComputedValue: <span class="type">Int</span> {</span><br><span class="line">    <span class="keyword">get</span> {</span><br><span class="line">        getOnlyComputedValue</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">set</span> {</span><br><span class="line">        stored <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="I-think-swift-struct-and-class-should-also-be-talked-about-in-this-phase-for-accordance-and-better-understanding-with-let-and-val-and-let-var-for-compound-value-and-reference"><a href="#I-think-swift-struct-and-class-should-also-be-talked-about-in-this-phase-for-accordance-and-better-understanding-with-let-and-val-and-let-var-for-compound-value-and-reference" class="headerlink" title="I think swift struct and class should also be talked about in this phase, for accordance, and better understanding with let and val, and let, var for compound value and reference."></a>I think swift struct and class should also be talked about in this phase, for accordance, and better understanding with let and val, and let, var for compound value and reference.</h4><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>Both in swift and rust, thougth staticly typed. Many times you don’t expilictly write type, and type Inferenced is the default behavior, unlike c/c++, thought you have auto and decltype, it’s not the default behavior, thus most times you still need to write types.</p>
<p>But still, swift and rust have some difference in type inference:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">"Blue"</span>), <span class="number">10</span>);</span><br><span class="line">scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">"Yellow"</span>), <span class="number">50</span>);</span><br></pre></td></tr></table></figure></div>
<p>this phase is legal, as type of <code>scores</code> is infered from line below.</p>
<p>How, similar code is impossible in swift, in swift these code are ok, as the type can but infered from literal after the assignment sign.</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> [<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>] <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">var</span> dict <span class="operator">=</span> [</span><br><span class="line">    <span class="string">"Blue"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"Yellow"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"Green"</span>: <span class="number">100</span></span><br><span class="line">    ] <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></div>

<p>but in swift, type can’t be infered from line after</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dict <span class="operator">=</span> <span class="type">Dictionary</span>() <span class="comment">//Error: Generic parameter 'Key' could not be inferred</span></span><br><span class="line">dict[<span class="string">"Blue"</span>] <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></div>
<p>Believe, this won’t cause much trouble in swift, and I believe would your code more clear.</p>
<p>What’s more, I think this limited make’s <code>swift repl</code> possible.<br>I think in <strong>Rust</strong> this type inference would cause trouble in implementation of repl, as you can do this when writing in a file, types are infered from line after, but in repl, when you write code line by line, this feature was impossible. But it seems Rust really have a repl thing, maybe they just disabled this feature in  <code>REPL</code>, I don’t know.</p>
<h3 id="Struct-Class"><a href="#Struct-Class" class="headerlink" title="Struct, Class"></a>Struct, Class</h3><p>Some Language have only struct like C, some only class like Java, maybe python, I don’t rememeber any python code with struct. Up to my knowledge know, Rust has only Struct. C++ have both struct and class, but it’s kind of redundancy. While in swift, struct and class have core difference, <strong>struct</strong> is <strong>value type</strong> and <strong>class</strong> is <strong>reference type</strong>, this is what I found unique for swift(up to my knowledge now), and thought that it’s for this reason, in swift, c++ interoperatability, c++ struct and class are both mapped to struct in swift, still swift struct and c++ class aren’t equivalent.</p>
<p>And in swift, thus comes ARC for Class.</p>
<p>In rust, <code>struct</code> and <code>impl</code> are seprated, while in swift, you can have methods defined inside struct. </p>
<p>And when it comes to c++, it’s awkwardly complicated, powerful, efficient. </p>
<h2 id="Expressions-Statement-and-semicolons"><a href="#Expressions-Statement-and-semicolons" class="headerlink" title="Expressions, Statement, and semicolons"></a>Expressions, Statement, and semicolons</h2><h2 id="Functions-and-maybe-Closure"><a href="#Functions-and-maybe-Closure" class="headerlink" title="Functions and maybe Closure"></a>Functions and maybe Closure</h2><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">foo</span>(<span class="params">input</span> <span class="params">val</span>: <span class="type">Int</span>) {</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">foo</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="keyword">inout</span> <span class="type">Int</span>) -&gt; <span class="type">Int</span> {</span><br><span class="line">    <span class="keyword">let</span> oldValue <span class="operator">=</span> val</span><br><span class="line">    val <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line">    <span class="keyword">return</span> oldValue</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">foo(input: <span class="number">1</span>)</span><br><span class="line">foo(input: x)</span><br><span class="line"><span class="keyword">var</span> y <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> output <span class="operator">=</span> foo(<span class="operator">&amp;</span>y)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>(s: <span class="type">String</span>) {</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="string">"{}"</span>, s);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_word_slice</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> {</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">" world."</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bytes</span> = s.<span class="title function_ invoke__">as_bytes</span>();</span><br><span class="line">    <span class="title function_ invoke__">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() {</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b' '</span> {</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    &amp;s[..]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() {</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">word1</span> = <span class="title function_ invoke__">first_word_slice</span>(&amp;<span class="keyword">mut</span> s1);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"the first word is: {}"</span>, word1);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">some_number</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">some_char</span> = <span class="title function_ invoke__">Some</span>(<span class="string">'e'</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">absent_number</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> y <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>I’m not sure, but much thing beside for Option in Rust and Swift are same. </p>
<p>First when I saw, <code>?</code>, <code>!</code>, <code>??</code>, <code>try?</code>, <code>try?</code> <code>if let</code>, <code>guard let</code>, in Swift Programmming Language, it’s makes me feel weird. I’ve now get used to it, and I thought this syntax is helpful and persures clarity.</p>
<h3 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h3><ul>
<li>Rust is with match synatx</li>
<li>Swift use switch/case<br>both with assocative value, and execustive match</li>
</ul>
<h2 id="Packages-Crates-and-Modules"><a href="#Packages-Crates-and-Modules" class="headerlink" title="Packages, Crates and Modules"></a>Packages, Crates and Modules</h2><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p>In swift, we have swift package manager. We got Packages, targets and module is something your didn’t always talk about but used all the time.</p>
<p> One thing I like about this swift package manager is Package.swift that enable your to write swift directly in manifest.<br> <div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// swift-tools-version: 5.8</span></span><br><span class="line"><span class="comment">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"MyBufferTests"</span>,</span><br><span class="line">    platforms: [</span><br><span class="line">        .macOS(.v13),</span><br><span class="line">    ],</span><br><span class="line">    products: [ ],</span><br><span class="line">    dependencies: [ ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"CmmulMEQT"</span>,</span><br><span class="line">            cSettings: [</span><br><span class="line">                .unsafeFlags([<span class="string">"-O3"</span>]),</span><br><span class="line">                .define(<span class="string">"ACCELERATE_NEW_LAPACK"</span>)</span><br><span class="line">            ],</span><br><span class="line">            linkerSettings: [</span><br><span class="line">                .linkedFramework(<span class="string">"Accelerate"</span>)</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: <span class="string">"SwiftBufferTests"</span>,</span><br><span class="line">            dependencies: [</span><br><span class="line">                <span class="string">"CmmulMEQT"</span></span><br><span class="line">            ],</span><br><span class="line">            swiftSettings: [</span><br><span class="line">                .unsafeFlags([<span class="string">"-O"</span>])</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: <span class="string">"CBufferTests"</span>,</span><br><span class="line">            dependencies: [</span><br><span class="line">                <span class="string">"CmmulMEQT"</span></span><br><span class="line">            ],</span><br><span class="line">            cSettings: [ .unsafeFlags([<span class="string">"-O3"</span>]) ]</span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">    cLanguageStandard: .c17,</span><br><span class="line">    cxxLanguageStandard: .cxx20</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><br>and you have import syntax</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br></pre></td></tr></table></figure></div>

<h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><p>In rust, your have crago for Packages, crates and modules. You write cargo.toml for manifest.</p>
<p>and  have syntax like</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMpa;</span><br></pre></td></tr></table></figure></div>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>it’s like somewhat in c++</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure></div>
<p>and </p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br></pre></td></tr></table></figure></div>

<p>in c/c++, get files into multiple files is something I don’t like, your need header and something iterative and replicatant.</p>
<h3 id="Interlude"><a href="#Interlude" class="headerlink" title="Interlude"></a>Interlude</h3><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">first</span> = &amp;v[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Error: v.push(6);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The first element is : {first}"</span>);</span><br></pre></td></tr></table></figure></div>
<p>I didn’t releaize the problem with this code at first point, I’m far from being rusty. 🤕</p>
<h2 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common Collections"></a>Common Collections</h2><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><p>Both Swift and Rust String are complicated because of Unicode and UTF-8/UTF-16 encoding, so unlike when you are coping with ASCII in C/C++, string indexing may not be as simple, but more power and multi-language friendly. </p>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h2 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h2><h3 id="Rust-1"><a href="#Rust-1" class="headerlink" title="Rust"></a>Rust</h3><p>In rust, you got </p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; {</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T), </span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>it’s explicate enum, just like <code>Option</code>, with functions like: <code>.unwrap()</code>, <code>.</code>expect()<code>; Besides, you got </code>panic!<code>, and </code>?` for Error propagation.</p>
<p>Let’s review some words in Rust and Swift</p>
<table>
<thead>
<tr>
<th>Rust</th>
<th>Swift</th>
</tr>
</thead>
<tbody><tr>
<td>Cargo</td>
<td>Swift Package Manager</td>
</tr>
<tr>
<td>crate</td>
<td>Target</td>
</tr>
<tr>
<td>panic</td>
<td>fatalError</td>
</tr>
<tr>
<td>trait</td>
<td>Protocol</td>
</tr>
<tr>
<td>it seems rustaceans really like kind of naming.</td>
<td></td>
</tr>
</tbody></table>
<h3 id="Swift-1"><a href="#Swift-1" class="headerlink" title="Swift"></a>Swift</h3><p>While in swift, you have got more some what jargon, keyword and syntax to know about. Optional is not really a part, but it’s something I found fit here.</p>
<p>First you got </p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">functionThatThrows</span>() -&gt; <span class="keyword">throws</span> <span class="type">Int</span> {</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">Error</span>(<span class="string">"Some Erro"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// and you call it with</span></span><br><span class="line"><span class="keyword">let</span> val <span class="operator">=</span> <span class="keyword">try?</span> functionThatThrows()</span><br><span class="line"><span class="keyword">let</span> nextVale <span class="operator">=</span> <span class="keyword">try!</span> functionThatThrows()</span><br></pre></td></tr></table></figure></div>
<p>you have <code>try</code>, <code>throws</code>, <code>throw</code> and <code>rethrow</code>, combines with <code>?</code>, <code>!</code>, <code>??</code> or without this postfix, to make a great number of combinations of easy to remember, intuitive and handy things.</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    <span class="comment">// some operation that throws</span></span><br><span class="line">    <span class="keyword">let</span> val <span class="operator">=</span> <span class="keyword">try</span> functionThatThrows()</span><br><span class="line">}<span class="keyword">catch</span> someError {</span><br><span class="line">    <span class="comment">// some code to save or not</span></span><br><span class="line">}<span class="keyword">catch</span> anotherError <span class="keyword">where</span> <span class="operator">...</span> {</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>and some handy ones for optional, optional and error handling are something interconnection in swift.</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> val: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> x <span class="operator">=</span> val {</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">// some other code</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//❌: print(x), x out of scope</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> y <span class="operator">=</span> val <span class="keyword">else</span>{</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">"..."</span>)</span><br><span class="line">    <span class="comment">// or return</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">print</span>(y) <span class="comment">// ✅</span></span><br></pre></td></tr></table></figure></div>

<p>and another way to do error handling is just the programming crash.<br>for example some times you can write code let that but not recommanded.</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> val: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> y <span class="operator">=</span> val<span class="operator">!</span></span><br><span class="line"><span class="built_in">precondition</span>(<span class="number">1</span> <span class="operator">==</span> <span class="number">0</span>, <span class="string">"🧐"</span>)</span><br><span class="line"><span class="built_in">fatalError</span>(<span class="string">"Let's crash"</span>)</span><br></pre></td></tr></table></figure></div>

<p>and code run only for debug</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>(<span class="number">1</span> <span class="operator">==</span> <span class="number">0</span>, <span class="string">"Only prints when debuging"</span>)</span><br></pre></td></tr></table></figure></div>

<p>you can see both <code>Result</code> and <code>Option</code> have mapping one to swift, but instead of explicitly using enum, swift introduces keywords to make it handy. </p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p>C++ also have try, catch blocks and assert, static_assert. But not Optional, nullptr instead.</p>
<h2 id="Generic-amp-Trait-Generic-amp-Protocols-Generic-amp-Concept"><a href="#Generic-amp-Trait-Generic-amp-Protocols-Generic-amp-Concept" class="headerlink" title="Generic & Trait, Generic & Protocols, Generic & Concept"></a>Generic &amp; Trait, Generic &amp; Protocols, Generic &amp; Concept</h2><p>Trait, Protocol are like interface in other languages, for example Java. </p>
<p>Core Difference of Rust and Swift Generics vs. C++ Generrics<br>let’s have a look at the code:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">largest</span>&lt;T&gt;(list: &amp;[T]) <span class="punctuation">-&gt;</span> &amp;T {</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">largest</span> = &amp;list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">item</span> <span class="keyword">in</span> list {</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest {</span><br><span class="line">            largest = item;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    largest</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">largest</span>&lt;<span class="type">T</span>&gt;(<span class="params">among</span> <span class="params">arr</span>: [<span class="type">T</span>]) -&gt; <span class="type">T</span> {</span><br><span class="line">    <span class="keyword">var</span> maximum <span class="operator">=</span> arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> arr {</span><br><span class="line">        <span class="keyword">if</span> val <span class="operator">&gt;</span> maximum {</span><br><span class="line">            maximum <span class="operator">=</span> val</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maximum</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>If you try to compile these two functions, you would get an error.<br>but in c++</p>
<div class="highlight-container" data-rel="Cxx"><figure class="iseeu highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅🧐</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">const</span> T&amp; <span class="title">largest</span><span class="params">(<span class="type">const</span> std::vector&lt;T&gt;&amp; list)</span> </span>{</span><br><span class="line">    <span class="type">const</span> T* largest = &amp;list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> T&amp; item : list) {</span><br><span class="line">        <span class="keyword">if</span> (item &gt; *largest) {</span><br><span class="line">            largest = &amp;item;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *largest;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>but in C++, it works.</p>
<p>The reason it doesn’t work is that in Rust, and Swift, <code>&gt;</code> is not garuranted to work on <code>T</code>, the same is true for c++, but c++’s generic have maybe something like lazy evluation, so it’s not checkout until you write code that fill in some real concreate type in <code>T</code>. It won’t cause error, but make troubles in developing. These we have </p>
<h3 id="Concept-in-C-23"><a href="#Concept-in-C-23" class="headerlink" title="Concept in C++23"></a>Concept in C++23</h3><div class="highlight-container" data-rel="Cxx"><figure class="iseeu highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;concepts&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> Comparable = <span class="built_in">requires</span>(T a, T b) {</span><br><span class="line">    { a &gt; b } -&gt; std::convertible_to&lt;<span class="type">bool</span>&gt;;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;Comparable T&gt;</span></span><br><span class="line"><span class="function"><span class="type">const</span> T&amp; <span class="title">largest</span><span class="params">(<span class="type">const</span> std::vector&lt;T&gt;&amp; list)</span> </span>{</span><br><span class="line">    <span class="type">const</span> T* largest = &amp;list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> T&amp; item : list) {</span><br><span class="line">        <span class="keyword">if</span> (item &gt; *largest) {</span><br><span class="line">            largest = &amp;item;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *largest;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; nums = { <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span> };</span><br><span class="line">    <span class="type">int</span> largestNum = <span class="built_in">largest</span>(nums);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Largest number: "</span> &lt;&lt; largestNum &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">double</span>&gt; doubles = { <span class="number">1.2</span>, <span class="number">3.5</span>, <span class="number">2.8</span>, <span class="number">0.5</span>, <span class="number">4.7</span> };</span><br><span class="line">    <span class="type">double</span> largestDouble = <span class="built_in">largest</span>(doubles);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Largest double: "</span> &lt;&lt; largestDouble &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="interlude"><a href="#interlude" class="headerlink" title="interlude"></a>interlude</h4><p>but I think it’s too late to add this feature, as long as it compiles without writing Concept, most programming won’t do the kind of stuff, and there are great bunch of legacy code in cxx. Besides, Rust and Swift comes with native <code>Trait</code> and <code>Protocol</code> and it doesn’t works only for <code>Generic</code> but prevasive in language, thus, there’s no overhead for understanding. <code>Concept</code> in cxx is like a bug fix or entending, that just bring more and more things to this language. </p>
<p>Now let’s refer to Python and type hinting, </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">        <span class="built_in">print</span>(key, value)</span><br></pre></td></tr></table></figure></div>
<p>but how many programers are using this feature? Just like for JavaScript and TypeScript, some times you must get off the legacy bundle and start somes from scratch.</p>
<h3 id="Trait-amp-Protocol"><a href="#Trait-amp-Protocol" class="headerlink" title="Trait & Protocol"></a>Trait &amp; Protocol</h3><p>I will just list some usages of Trait Rust, as there’s a great deal of contents. And for swift, even more, as swift can be called as a <code>Protocol Oriented Language</code></p>
<h4 id="Define-a-trait-Define-Protocol"><a href="#Define-a-trait-Define-Protocol" class="headerlink" title="Define a trait, Define Protocol"></a>Define a trait, Define Protocol</h4><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> {</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>swift protocol and also define protocol access requirements. Remember properity with <code>{get}</code> or <code>{get set}</code> aren’t necessarily computed properity.</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">SomeProtocol</span> {</span><br><span class="line">    <span class="keyword">var</span> mustBeSettable: <span class="type">Int</span> { <span class="keyword">get</span> <span class="keyword">set</span> }</span><br><span class="line">    <span class="keyword">var</span> doesNotNeedToBeSettable: <span class="type">Int</span> { <span class="keyword">get</span> }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">someTypeMethod</span>()</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">toggle</span>()</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="implementation-and-default-implementation-conditional-implementation"><a href="#implementation-and-default-implementation-conditional-implementation" class="headerlink" title="implementation and default implementation, conditional implementation"></a>implementation and default implementation, conditional implementation</h4><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">NewsArticle</span> {</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summarize</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>swift methods are normally defined inside struct, but can also be extended outside with extension</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">someStrust</span>: <span class="title class_">SomeProtocol</span>, <span class="title class_">AnotherProtocol</span> {</span><br><span class="line">    <span class="comment">// confroms must be explicate, except for default implementation and conditional implementaton</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>it’s not inheritance, as still need to explicatedly <strong>implement</strong> for each struct rather than have methods and properity inherted from it’s parent.</p>
<h4 id="with-generics"><a href="#with-generics" class="headerlink" title="with generics"></a>with generics</h4><p>as for code before, <code>&lt;</code> operate must be explicatly available, thus you write code like this:</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item: &amp;<span class="keyword">impl</span> <span class="title class_">Summary</span>) {</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Breaking news! {}"</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>&lt;T: Summary&gt;(item: &amp;T) {</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Breaking news! {}"</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>&lt;T&gt;(item: &amp;T) <span class="keyword">where</span> T: Summary {</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Breaking news! {}"</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Comparable</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">&lt;</span> (<span class="keyword">_</span> <span class="params">lhs</span>: <span class="keyword">Self</span>, <span class="keyword">_</span> <span class="params">rhs</span>: <span class="keyword">Self</span>) -&gt; <span class="type">Bool</span> </span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">largest</span>&lt;<span class="type">T</span>&gt;(<span class="params">items</span>: [<span class="type">T</span>]) <span class="keyword">where</span> <span class="type">T</span>: <span class="type">Comparable</span> {</span><br><span class="line">    <span class="comment">/// implemenation</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="use-as-return-type"><a href="#use-as-return-type" class="headerlink" title="use as return type"></a>use as return type</h4><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_summarizable</span>(switch: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Summary</span> {</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getLargest</span>&lt;<span class="type">T</span>&gt;(<span class="params">from</span> <span class="params">items</span>: [<span class="type">T</span>] ) -&gt; <span class="keyword">some</span> <span class="type">T</span> <span class="keyword">where</span> <span class="type">T</span>: <span class="type">Comparable</span> {</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="combination"><a href="#combination" class="headerlink" title="combination"></a>combination</h4><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T: Display + <span class="built_in">PartialOrd</span>&gt; Pair&lt;T&gt; {</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">combinedProtocol</span>: <span class="title class_">SomeProtocol</span>, <span class="title class_">AnotherProtocol</span>  {</span><br><span class="line">    <span class="comment">// and you can add some additional requirement</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>Protocols can be inherated, which is infact combine and addition, but be carefully, as there can be problems like implementation conflictions. Anyway, compiler would get you notified.</p>
<p>and combines</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">wishHappyBirthday</span>(<span class="params">to</span> <span class="params">celebrator</span>: <span class="type">Named</span> &amp; <span class="type">Aged</span>)</span><br><span class="line"><span class="comment">// Named and Aged are two Protocols </span></span><br></pre></td></tr></table></figure></div>
<h3 id="Generic-and-Lifetime-in-Rust"><a href="#Generic-and-Lifetime-in-Rust" class="headerlink" title="Generic and Lifetime in Rust"></a>Generic and Lifetime in Rust</h3><p>I haven’t got an soild understanding on this part.</p>
<h2 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h2><p>I don’t know the most common way of doing test in cxx, make with cmake ctest.</p>
<p>In Rust, you test with and module marked #[cfg(test)], and in swift, you test with XCTest framework. XCTest I believe stands for Xcode Test, it does work without Xcode but got really terrible output sometimes. </p>
<h2 id="Funtional-Programming"><a href="#Funtional-Programming" class="headerlink" title="Funtional Programming"></a>Funtional Programming</h2><p>I didn’t tell Procedural Programming and Functional Programming for a long time. 😣.</p>
<p>I first learn about Function Programming when learning python from <a class="link" href="https://cs61a.org/">CS61A<i class="fa-solid fa-up-right-from-square"></i></a> with .map and .reduce. </p>
<h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><h4 id="Rust-2"><a href="#Rust-2" class="headerlink" title="Rust"></a>Rust</h4><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span>  <span class="title function_">add_one_v1</span>   (x: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> { x + <span class="number">1</span> }</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v2</span> = |x: <span class="type">u32</span>| <span class="punctuation">-&gt;</span> <span class="type">u32</span> { x + <span class="number">1</span> };</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v3</span> = |x|             { x + <span class="number">1</span> };</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v4</span> = |x|               x + <span class="number">1</span>  ;</span><br></pre></td></tr></table></figure></div>


<h4 id="Swift-2"><a href="#Swift-2" class="headerlink" title="Swift"></a>Swift</h4><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line">{ (<span class="operator">&lt;</span>#parameters#<span class="operator">&gt;</span>) -&gt; <span class="operator">&lt;</span>#return type#<span class="operator">&gt;</span> <span class="keyword">in</span></span><br><span class="line">   <span class="operator">&lt;</span>#statements#<span class="operator">&gt;</span></span><br><span class="line">}</span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted(by: { (s1: <span class="type">String</span>, s2: <span class="type">String</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> s1 <span class="operator">&gt;</span> s2</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted(by: { (s1: <span class="type">String</span>, s2: <span class="type">String</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> s1 <span class="operator">&gt;</span> s2 } )</span><br><span class="line"></span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted(by: { s1, s2 <span class="keyword">in</span> <span class="keyword">return</span> s1 <span class="operator">&gt;</span> s2 } )</span><br><span class="line"></span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted(by: { s1, s2 <span class="keyword">in</span> s1 <span class="operator">&gt;</span> s2 } )</span><br><span class="line"></span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted(by: { <span class="variable">$0</span> <span class="operator">&gt;</span> <span class="variable">$1</span> } )</span><br><span class="line"></span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted(by: <span class="operator">&gt;</span>)</span><br><span class="line"></span><br><span class="line">reversedNames <span class="operator">=</span> names.sorted() { <span class="variable">$0</span> <span class="operator">&gt;</span> <span class="variable">$1</span> }</span><br></pre></td></tr></table></figure></div>
<p>the last one is <strong>Trailing closures</strong> which is really handy, espically with <code>@resultBuilder</code>, in swift, you can explictly capture value by syntax.</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line">someFunctionWithEscapingClosure { [<span class="keyword">self</span>] <span class="keyword">in</span> x <span class="operator">=</span> <span class="number">100</span> }</span><br></pre></td></tr></table></figure></div>

<p>and the type of closure is clear</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="operator">=</span> {<span class="variable">$0</span> <span class="operator">&gt;</span> <span class="variable">$1</span>}</span><br></pre></td></tr></table></figure></div>
<p>it’s handy to write type for a function as input and pass in a closure.</p>
<h4 id="lambda-in-c"><a href="#lambda-in-c" class="headerlink" title="lambda in c++"></a>lambda in c++</h4><div class="highlight-container" data-rel="Cxx"><figure class="iseeu highlight cxx"><table><tr><td class="code"><pre><span class="line">[capture-list](parameters) -&gt; <span class="keyword">return</span>-type {</span><br><span class="line">    <span class="comment">// Function body</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>it also get closure like in c++, what not as easy to write and use.</p>
<h4 id="Capture-value"><a href="#Capture-value" class="headerlink" title="Capture value"></a>Capture value</h4><p>In rust, you need to worry about ownership and reference. In swift, closure it self is reference type, we haven’t yet talked about class and ARC in swift, but closure can cause problems with ARC. </p>
<p>both in swift and rust, functional programming codes looks simlar, while one comes with deep and shallow copy, anothor with fine grained control on reference. Funtional programming makes code concise and clear, and as swift and rust are both static typed, compiling programming, thanks to the developement of compiler in these years, the performance is guaranteed.</p>
<h2 id="Smart-Pointer-and-ARC-RAII"><a href="#Smart-Pointer-and-ARC-RAII" class="headerlink" title="Smart Pointer, and ARC, RAII"></a>Smart Pointer, and ARC, RAII</h2><h3 id="class-in-swift"><a href="#class-in-swift" class="headerlink" title="class in swift"></a>class in swift</h3><p>We haven’t introduced class in swift. There are languages that have struct only, and langauage have class only. In C++, you get both struct and class, but the only difference is the access level, I think it’s primarly for working with c and is infact some kind’s reduantly. </p>
<p>In swift, class has some core difference with struct, struct is value type in swift, class is reference type, and class have deinit, inhertance. </p>
<h4 id="swift-5-9"><a href="#swift-5-9" class="headerlink" title="swift 5.9"></a>swift 5.9</h4><p>swift 5.9 introduced c++ interoprablity, this changed that struct can’t have deinit.</p>
<p>you can now give a struct deinit by let comform to :<code>~Copyable</code> this maybe be familar to c++ writters. </p>
<h3 id="smart-pointer"><a href="#smart-pointer" class="headerlink" title="smart pointer"></a>smart pointer</h3><p>Both in rust and c++, you got smart pointers, and weak for reference cycle and break reference cycles.</p>
<h3 id="RAII-and-ARC"><a href="#RAII-and-ARC" class="headerlink" title="RAII and ARC"></a>RAII and ARC</h3><p>In swift, you rarely use pointer directly as it’s unsafe, reference works with class and is implicate, but the class keyword should make you aware of it. I think it’s a gate that one start to understand swift. But ARC sometimes comes to problems with reference cycle as well and such program is easily created when using closure that captures class’s self. </p>
<h2 id="Concurrency-Support"><a href="#Concurrency-Support" class="headerlink" title="Concurrency Support"></a>Concurrency Support</h2><p>Rust’s features on ownership and it’s integration with compiler’s check system.<br>And when it’s talking about Concurrency, Go is famous for it, I personally haven’t learn that language, but hear of it for it’s support for concurrency. </p>
<p>Rust’s Ownership module is the fundation of it’s concurrency support, and the left part to of the support isn’t in the language it self but in crates.</p>
<p>Swift on the other side bring’s some keyword for it.</p>
<p>C++ is a powerfully language that allows you to do many fine-grained control, I don’t if there’s language syntax level control on this, but I know many work you that you do with concurrency in C++ is using some specific libraries.</p>
<h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object Oriented Programming"></a>Object Oriented Programming</h2><p><em>If a language must have inheritance to be an object-oriented language, then Rust is not one.</em> The Rust programming langugage.</p>
<p>In swift, struct don’t directly have Inheritance by defination.</p>
<p>But wait, when we are talking about inheritance, as I remember learn Java, inheritance is something not easy to gasp and prone to make mistake, and do we really need them.</p>
<h3 id="Protocol-Oriented-Programming"><a href="#Protocol-Oriented-Programming" class="headerlink" title="Protocol-Oriented Programming"></a>Protocol-Oriented Programming</h3><p>Protocol-Oriented is as some level similar to Oriented Programming. </p>
]]></content>
  </entry>
  <entry>
    <title>Swift Server Practice</title>
    <url>/2023/02/09/swift-Server/</url>
    <content><![CDATA[<p>In Vapor, if you want your server program accessible to outside network, you set your hostname with the following code:</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line">webapp.http.server.configuration.hostname <span class="operator">=</span> <span class="string">"0.0.0.0"</span></span><br></pre></td></tr></table></figure></div>

<p>with special thanks to chatGPT’s answer:<br>This code is setting the hostname of an HTTP server in the Vapor framework. The hostname is being set to the “0.0.0.0” IP address, which is a special address known as the “wildcard” or “unspecified” address.</p>
<p>When an HTTP server is bound to this address, it means that the server will accept incoming connections on any IP address associated with the machine. This can be useful when you want your server to be accessible from any network interface on the machine, or when you don’t know the specific IP address you want to bind to in advance.</p>
<p>In this case, the hostname is being set in the “configuration” object of the HTTP server, which is an instance of the <code>HTTPServerConfig</code> struct. The hostname property of the struct is being set to the “0.0.0.0” IP address, which will cause the server to listen for incoming connections on all available network interfaces.</p>
<h2 id="Network-Information"><a href="#Network-Information" class="headerlink" title="Network Information"></a>Network Information</h2><p>Besides, I list some useful commands here:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure></div>

<p>The <code>netstat</code> command is a utility used to display network statistics and information about the system’s network connections. The options used in the command <code>netstat -antp</code> are as follows:</p>
<ul>
<li><code>-a</code>: This option displays all active connections, including both incoming and outgoing connections.</li>
<li><code>-n</code>: This option displays IP addresses and port numbers in numerical form, rather than resolving them to hostnames and service names.</li>
<li><code>-t</code>: This option displays only TCP connections.</li>
<li><code>-p</code>: This option displays the name of the process associated with each connection.</li>
</ul>
<p>When run with these options, netstat -antp will display a list of all active TCP connections on the system, including both incoming and outgoing connections. The list will include the local and remote IP addresses and port numbers, as well as the name of the process associated with each connection.</p>
<p>This information can be useful for diagnosing network-related issues, such as determining which process is using a particular port or monitoring network activity.</p>
<h2 id="Special-Config-of-Aliyun"><a href="#Special-Config-of-Aliyun" class="headerlink" title="Special Config of Aliyun"></a>Special Config of Aliyun</h2><blockquote>
<p>How to make a port on Aliyun Server accessible to all network interfaces</p>
</blockquote>
<p>To make a port on an Aliyun Server accessible to all network interfaces, you need to configure the firewall and bind the port to the “0.0.0.0” IP address. Here’s an overview of the steps you need to follow:</p>
<ol>
<li>Open the firewall port: In the Aliyun Console, go to the “Security Group” page and add a new rule to allow incoming traffic on the desired port. This will ensure that the port is accessible from any network.</li>
<li>Bind the port to “0.0.0.0”: In the configuration of the service that is using the port (for example, an HTTP server), you will need to bind the port to the “0.0.0.0” IP address. The exact method of doing this will depend on the software you are using, but it will typically involve setting a hostname or IP address in the server configuration.</li>
</ol>
<p>Once you have made these changes, you should be able to access the port from any network interface on the Aliyun Server. However, it is important to note that you should only open the firewall port and bind the port to “0.0.0.0” if you need to allow incoming connections from any network. If you only need to allow incoming connections from specific networks, you should restrict access to the port by configuring the firewall appropriately.</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>you need to give root user a password, or vapor would keep giving your a <code>111</code> error code. So you need to add the following magic incantation</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'MyN3wP4ssw0rd'</span>;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></div>

<p>mysql statements I have been used quite frequently.</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span>;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span><span class="keyword">table</span> name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>软件课设</tag>
        <tag>Vapor</tag>
        <tag>Aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>WWDC_NewsInSwift</title>
    <url>/2023/06/15/WWDC-NewsInSwift/</url>
    <content><![CDATA[<h2 id="Tune-low-level-performance"><a href="#Tune-low-level-performance" class="headerlink" title="Tune low-level performance"></a>Tune low-level performance</h2><p>Is Swift Getting Rusty?</p>
<h2 id="C-Interoperability"><a href="#C-Interoperability" class="headerlink" title="C++ Interoperability"></a>C++ <strong>Inter</strong>operability</h2><p>This topic is greatly interconnectted with the topic above.</p>
<p>Incremental Swift adoption.</p>
<p>Remove Objective-C Bridging for C++ libraries.</p>
<p>No overhead?</p>
<p>Imported Cxx <code>std::vector</code> -&gt; Swift <code>std.vector</code> short lifetime, and deep copy( unlike swift Array), copy constructor and destructor to manage lifetime.</p>
<p>Reference Semantics.<br><code>SWIFT_SHARED_REFERENCE(retain, release)</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;swift/bridging&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h2><h2 id="Swift-DocC"><a href="#Swift-DocC" class="headerlink" title="Swift-DocC"></a>Swift-DocC</h2><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">query</span>&lt;<span class="type">FirstPayload</span>, each <span class="type">Payload</span>&gt;(<span class="keyword">_</span> <span class="params">first</span>: <span class="type">Request</span>&lt;<span class="type">FirstPayload</span>&gt;, <span class="keyword">_</span> <span class="params">item</span>: <span class="keyword">repeat</span> <span class="type">Request</span>&lt;each <span class="type">Payload</span>&gt;) -&gt; (<span class="type">FirstPayload</span>, <span class="keyword">repeat</span> each <span class="type">Payload</span>) <span class="keyword">where</span> <span class="type">FirstPayload</span>: <span class="type">Equatable</span>, <span class="keyword">repeat</span> each <span class="type">Payload</span>: <span class="type">Equatable</span> {</span><br><span class="line">	<span class="keyword">return</span>	( <span class="keyword">repeat</span> (each item).evaluate() )</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>Swift, WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>iOSDevLearning</title>
    <url>/2023/01/15/iOSDevLearning/</url>
    <content><![CDATA[<h1 id="Learning-Path"><a href="#Learning-Path" class="headerlink" title="Learning Path"></a>Learning Path</h1><p>Before started Learning iOS Developing, I have learned C and do some practices on leetcode.com. I didn’t even learn object-oriented coding before.</p>
<p>On starting, I went Junior of my University Life.</p>
<p>I first play with Swift Playgrounds App, finished <code>Learn to Code 1</code> and <code>Learn to Code 2</code> to have a basic idea of swift. It’s fun, but I won’t recommend it to you who have basic knowledge of programming.</p>
<p>After that, I read <a class="link" href="https://www.swift.org/getting-started/">document of swift<i class="fa-solid fa-up-right-from-square"></i></a> to have a deeper understanding. It took me about 3 weeks, in fact, only a small part is left in my mind, it’s a huge jump from C to Swift, swift are full to features for modern high level programming language, beside, I haven’t learn something about object-oriented. As a result, I have a basic understanding of swift, get to know those fancy usage, but when see something like <code>@Environment</code>, I have no idea what’s happening. </p>
<p>After that, I followed <a class="link" href="https://developer.apple.com/tutorials/app-dev-training">iOS App Dev Tutorial<i class="fa-solid fa-up-right-from-square"></i></a>, it first goes well, but I can’t catch up when starting UIKit part, and I didn’t know how to store data. It’s like I know what’s happening when seeing the code for most time, but I didn’t know how to make it my own. </p>
<p>Then, to learn C++, I read C++ Primer, and have access to object-oriented programming the first time in my life, it’s helps understanding swift.</p>
<p>After that, to have a better understanding of SwiftUI, I followed the courses:</p>
<ul>
<li><a class="link" href="https://developer.apple.com/tutorials/swiftui">SwiftUI Tutorials<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://developer.apple.com/tutorials/swiftui-concepts">SwiftUI Concepts Tutorials<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://developer.apple.com/tutorials/sample-apps">Sample Apps Tutorial<i class="fa-solid fa-up-right-from-square"></i></a></li>
</ul>
<p>Still, what you can learn is limited just following the tutorial and copy some coce rather than do it by your self. </p>
<p>Up to now, I can declare some basic UI Views, passing data between views. I don’t know how to store data persistantly, connect to internet, and so on.</p>
<p>I’m currently following the Stanford Course <a class="link" href="https://cs193p.sites.stanford.edu/">CS193p<i class="fa-solid fa-up-right-from-square"></i></a>, and plan to read  <a class="link" href="https://developer.apple.com/design/human-interface-guidelines/guidelines/overview/">Human Interface Guidelines<i class="fa-solid fa-up-right-from-square"></i></a> after, beside, I’m reading documents of SwiftUI.</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Website Links</title>
    <url>/2022/12/19/web_bookmarks/</url>
    <content><![CDATA[<h2 id="Network-Access"><a href="#Network-Access" class="headerlink" title="Network Access"></a>Network Access</h2><ul>
<li><a class="link" href="https://www.mojie.cyou/">魔戒.net<i class="fa-solid fa-up-right-from-square"></i></a> VPN, 130G for 12.00 RMB.</li>
</ul>
<h2 id="Study-Sites"><a href="#Study-Sites" class="headerlink" title="Study Sites:"></a>Study Sites:</h2><ul>
<li><a class="link" href="https://www.khanacademy.org/">Khan Academy<i class="fa-solid fa-up-right-from-square"></i></a> Khan Academy is a 501(c)(3) nonprofit organization.</li>
<li><a class="link" href="https://www.edx.org/">edX<i class="fa-solid fa-up-right-from-square"></i></a> High Quality, but limited access for free user.</li>
<li><a class="link" href="https://www.coursera.org/">coursea<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://leetcode.com/explore/learn/">LeetCode<i class="fa-solid fa-up-right-from-square"></i></a> You can learn data structure, algorithm and conquer problems here. But I highly recommend you have a preliminary of language you perfer, for example STL in C++.</li>
</ul>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul>
<li><a class="link" href="https://leetcode.com/discuss/general-discussion/1560831/Answer-Formatting-Cheatsheet-Markdown-%2B-LC-Features">Markdown Reference for LeetCode<i class="fa-solid fa-up-right-from-square"></i></a> Formatting Cheatsheet</li>
<li><a class="link" href="https://www.learnlatex.org/">LaTeX<i class="fa-solid fa-up-right-from-square"></i></a> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> Learning Material</li>
<li><a class="link" href="https://git-scm.com/docs">Git Reference<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li>Cpp<ul>
<li><a class="link" href="https://en.cppreference.com/w/">C++ Reference<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://doxygen.nl/manual/docblocks.html">Documenting the code<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://cseweb.ucsd.edu//~viscomp/classes/cse167/wi17/assignments.html">CSE 167<i class="fa-solid fa-up-right-from-square"></i></a> Computer Graphics Course</li>
<li><a class="link" href="https://paroj.github.io/gltut/index.html">Learning Modern 3D Graphics Programming<i class="fa-solid fa-up-right-from-square"></i></a></li>
</ul>
</li>
<li>iOS<ul>
<li><a class="link" href="https://docs.swift.org/swift-book/">Swift Book<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://swift.gg/">SwiftGG<i class="fa-solid fa-up-right-from-square"></i></a> Swift翻译组</li>
<li><a class="link" href="https://developer.apple.com/tutorials/swiftui">SwiftUI  Tutorials<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://developer.apple.com/tutorials/app-dev-training">iOS App Dev  Tutorials<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://github.com/wwdc">WWDC Repositories<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://cs193p.sites.stanford.edu/">CS193p<i class="fa-solid fa-up-right-from-square"></i></a> Developing Apps for iOS</li>
</ul>
</li>
<li>Python<ul>
<li><a class="link" href="https://docs.python.org/3/reference/index.html">The Python Language Reference<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://numpy.org/">NumPy<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://matplotlib.org/">matplotlib<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://scipy.org/">SciPy<i class="fa-solid fa-up-right-from-square"></i></a></li>
<li><a class="link" href="https://scikit-learn.org/stable/index.html">scikit-learn<i class="fa-solid fa-up-right-from-square"></i></a> Machine Learning in Python</li>
<li><a class="link" href="http://neuralnetworksanddeeplearning.com/">Neural Networks and Deep Learning<i class="fa-solid fa-up-right-from-square"></i></a> An Introducing Book of Neural Networks and Deep Learning.</li>
</ul>
</li>
<li><a class="link" href="https://docs.oracle.com/en/java/javase/19/docs/api/">Java Document<i class="fa-solid fa-up-right-from-square"></i></a></li>
</ul>
<h2 id="Mac-M1"><a href="#Mac-M1" class="headerlink" title="Mac (M1)"></a>Mac (M1)</h2><ul>
<li>Programmer<ul>
<li><a class="link" href="https://brew.sh/">Homebrew<i class="fa-solid fa-up-right-from-square"></i></a> Homebrew installs the stuff you need that Apple (or your Linux system) didn’t. Like apt-get on Linux.</li>
<li><a class="link" href="https://ohmyz.sh/">Oh My ZSH!<i class="fa-solid fa-up-right-from-square"></i></a></li>
</ul>
</li>
<li>Electrical Engineering<ul>
<li><a class="link" href="http://iverilog.icarus.com/">Icarus Verilog<i class="fa-solid fa-up-right-from-square"></i></a> 数电仿真，配合<a class="link" href="http://www.logicpoet.com/scansion/">Scansion<i class="fa-solid fa-up-right-from-square"></i></a>查看仿真波形</li>
<li><a class="link" href="https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html">LTSpice<i class="fa-solid fa-up-right-from-square"></i></a> 模电仿真，本人本科学习过程中遇到的实验都可以完成，可替代Multisim, PSpice.</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Use CMake to Generate Xcode C++ Project</title>
    <url>/2022/12/17/cmake_xcode/</url>
    <content><![CDATA[<h2 id="What’s-CMake"><a href="#What’s-CMake" class="headerlink" title="What’s CMake"></a>What’s <a class="link" href="https://cmake.org/">CMake<i class="fa-solid fa-up-right-from-square"></i></a></h2><p>CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.</p>
<p>If you are a C++ programmer, CMake is what you can’t miss, especially when you write cross platform apps. </p>
<p>When Learning a Computer Graphics Course this year, teacher upload an project with Makefile which doesn’t work on my M1 Mac. I use Xcode for C++ IDE, and it’s frustrued set up file path, include path, library path. Then I learned CMake, which you write a <code>CMakeLists.txt</code> to set up your project, like targets, libraries, and it can generate build file for varies developing environment from UNIX Makefile(Which is the default build system), Visual Studio, to Xcode. What’s more, this makes you code portable, as you can’t send you Xcode Project to a friend who is a Windows user.</p>
<p>Besides, some library won’t provide you a compile version of the library, instead, you can download source code, and compile on your own computer. For example:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/oatpp/oatpp.git</span><br><span class="line"><span class="built_in">cd</span> oatpp/</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">cmake ..</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>

<h2 id="CMake-Learning-Material"><a href="#CMake-Learning-Material" class="headerlink" title="CMake Learning Material"></a>CMake Learning Material</h2><p><a class="link" href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">CMake<i class="fa-solid fa-up-right-from-square"></i></a></p>
<h2 id="an-CMakeList-txt-example"><a href="#an-CMakeList-txt-example" class="headerlink" title="an CMakeList.txt example"></a>an CMakeList.txt example</h2><div class="highlight-container" data-rel="Cmake"><figure class="iseeu highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"><span class="keyword">project</span>(Tutorial VERSION <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(tutorial_compiler_flags INTERFACE)        </span><br><span class="line"><span class="keyword">target_compile_features</span>(tutorial_compiler_flags INTERFACE cxx_std_11)</span><br><span class="line"><span class="keyword">set</span>(gcc_like_cxx <span class="string">"$&lt;COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,CNU,LCC&gt;"</span>)</span><br><span class="line"><span class="keyword">set</span>(msvc_cxx <span class="string">"$&lt;COMPILE_LANG_AND_ID:CXX,MSVC&gt;"</span>)</span><br><span class="line"><span class="keyword">target_compile_options</span>(tutorial_compiler_flags INTERFACE</span><br><span class="line">  <span class="string">"$&lt;${gcc_like_cxx}:$&lt;BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused&gt;&gt;"</span></span><br><span class="line">  <span class="string">"$&lt;${msvc_cxx}:$&lt;BUILD_INTERFACE:-W3&gt;&gt;"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">option</span>(USE_MYMATH <span class="string">"Use tutorial provided math implementation"</span> <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">configure_file</span>(TutorialConfig.h.in TutorialConfig.h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(USE_MYMATH)</span><br><span class="line">  <span class="keyword">add_subdirectory</span>(MathFunctions)</span><br><span class="line">  <span class="keyword">list</span>(APPEND EXTRA_LIBS MathFunctions)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">add_executable</span>(Tutorial tutorial.cxx)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(Tutorial PUBLIC <span class="variable">${EXTRA_LIBS}</span> tutorial_compiler_flags)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(Tutorial PUBLIC</span><br><span class="line">                           <span class="string">"${PROJECT_BINARY_DIR}"</span></span><br><span class="line">                           )</span><br></pre></td></tr></table></figure></div>
<h2 id="Build-Project"><a href="#Build-Project" class="headerlink" title="Build Project"></a>Build Project</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Step1_build</span><br><span class="line"><span class="built_in">cd</span> Step1_build</span><br><span class="line">cmake ../Step1</span><br><span class="line">cmake --build .</span><br></pre></td></tr></table></figure></div>
<h2 id="Simplest-CMakeLists-txt-Example"><a href="#Simplest-CMakeLists-txt-Example" class="headerlink" title="Simplest CMakeLists.txt Example"></a>Simplest CMakeLists.txt Example</h2><div class="highlight-container" data-rel="Cmake"><figure class="iseeu highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(MathFunctions mysqrt.cxx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(MathFunctions</span><br><span class="line">          INTERFACE <span class="variable">${CMAKE_CURRENT_SOURCE_DIR}</span></span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(MathFunctions tutorial_compiler_flags)</span><br></pre></td></tr></table></figure></div>
<h2 id="Generate-Xcode-Project"><a href="#Generate-Xcode-Project" class="headerlink" title="Generate Xcode Project"></a>Generate Xcode Project</h2><p>The default generator is UNIX Make, you can change the generator to Xcode Using at newly maked build_xcode directory, </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">cmake <span class="variable">${CMakeLists.txt file path}</span> -G Xcode</span><br></pre></td></tr></table></figure></div>
<p>Remember, after you add files to your Xcode project, it hasn’t been add to your <code>CMakeLists.txt</code>, if you regenerate xcode project with cmake, problems gonna happen. You can fix it be edit your <code>CMakeLists.txt</code>, emm, it truly tedious add your file in <code>CMakeLists.txt</code> every time, but I haven’t found a better way yet.</p>
<h2 id="Xcode-C-Error"><a href="#Xcode-C-Error" class="headerlink" title="Xcode C++ Error"></a>Xcode C++ Error</h2><p>Date: Sun Dec 18 11:22:30 CST 2022<br>After I Updated Xcode 14.2 Last Night, when I reopen my c++ Project, this problem happened.<br><img lazyload="" src="/images/loading.svg" data-src="/fig/xcode_c++_error_20221218_01.jpg" alt="error"><br>Problem fixed after I regenerate my xcode project in directory <code>build_xode</code>:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r *</span><br><span class="line">cmake .. -G Xcode</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tutorial</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>CMake</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ WebServer 1 Linux系统编程入门</title>
    <url>/2022/12/17/WebServerNote/webserver-note1/</url>
    <content><![CDATA[<p>为了软件课设来看的这门课,简介上说的是C++，但其实大多数时候还是写的C-Style的代码，这门课里讲到了进程、多线程，还有同步、异步，项目里用到了epoll。但软件课设的后端相对比较简单，也没有什么多线程的问题，唯一的要求是要用数据库，这里面还没讲。感觉对软件课设帮助不大，就当看着玩吧。<a class="link" href="https://www.nowcoder.com/study/live/504">课程链接<i class="fa-solid fa-up-right-from-square"></i></a></p>
<p>因为最近在学C++，所以想用C++写后端，现在总之就是十分后悔。先是看了<a class="link" href="https://www.gnu.org/software/cgicc/index.html">CGI<i class="fa-solid fa-up-right-from-square"></i></a>，还装了<a class="link" href="https://httpd.apache.org/">Apache<i class="fa-solid fa-up-right-from-square"></i></a>,后来又找了个C++的后端库<a class="link" href="https://oatpp.io/docs/start/">oatpp<i class="fa-solid fa-up-right-from-square"></i></a>。事已至此，只能硬着头皮写下去了。</p>
<h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><table>
<thead>
<tr>
<th>Command</th>
<th>Usage</th>
</tr>
</thead>
<tbody><tr>
<td>-E</td>
<td>Run the preprocessing stage</td>
</tr>
<tr>
<td>-S</td>
<td>Run the previous stages as well as LLVM generation and optimization stages and target-specific code generation, producing an assembly file</td>
</tr>
<tr>
<td>-c</td>
<td>Run all of the above, plus the assembler, generating a target “.o” object file</td>
</tr>
<tr>
<td>-o</td>
<td>Write output to file</td>
</tr>
<tr>
<td>-I<directory></directory></td>
<td>Add the specified directory to the search path for included files</td>
</tr>
<tr>
<td>-g</td>
<td>Generate debug information</td>
</tr>
<tr>
<td>-D</td>
<td>Adds an implicit #define into the predefined buffer which is read before the source file is being preprocessed.</td>
</tr>
<tr>
<td>-w</td>
<td></td>
</tr>
<tr>
<td>-Wall</td>
<td></td>
</tr>
<tr>
<td>-On</td>
<td></td>
</tr>
<tr>
<td>-l</td>
<td></td>
</tr>
<tr>
<td>-L</td>
<td></td>
</tr>
<tr>
<td>-fpic/-fPIC</td>
<td></td>
</tr>
<tr>
<td>-shared</td>
<td></td>
</tr>
<tr>
<td>-std</td>
<td></td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"message appear only when debugging\n"</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i) <span class="built_in">printf</span>(<span class="string">"hello, GCC!!!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc test.c -o <span class="built_in">test</span> -DDEBUG</span><br></pre></td></tr></table></figure></div>

<h3 id="静态库的制作"><a href="#静态库的制作" class="headerlink" title="静态库的制作"></a>静态库的制作</h3><p>Name</p>
<blockquote>
<p>Linux : libxxx.a<br> Windows: libxxx.lib</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c *.c</span><br><span class="line">ar rcs libxxx.a *.o</span><br></pre></td></tr></table></figure></div>

<h3 id="动态库的制作和使用"><a href="#动态库的制作和使用" class="headerlink" title="动态库的制作和使用"></a>动态库的制作和使用</h3><p><code>linux: libxxx.so</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-fpic 与位置无关</span></span><br><span class="line">gcc -c -fpic/-fPIC a.c b.c</span><br><span class="line">gcc -shared a.o b.o -o libxxx.so</span><br><span class="line">gcc main.c -o main -I include/ -L lib/ -l calc</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>cannot open shared object file: No such file or directory</p>
</blockquote>
<h3 id="动态库加载失败的原因"><a href="#动态库加载失败的原因" class="headerlink" title="动态库加载失败的原因"></a>动态库加载失败的原因</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ldd main</span><br><span class="line">DT_RPATH -&gt; LD_LIBRARY_PATH -&gt; /etc/ld.so.cache -&gt; /lib/, /usr/lib</span><br></pre></td></tr></table></figure></div>

<h3 id="解决动态库加载失败问题"><a href="#解决动态库加载失败问题" class="headerlink" title="解决动态库加载失败问题"></a>解决动态库加载失败问题</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/home/dachuang/Downloads/CppWeb/Lesson06/library/lib</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">ldd main</span><br><span class="line"></span><br><span class="line"><span class="comment"># path will disappear after close path</span></span><br><span class="line"><span class="comment"># user level setting</span></span><br><span class="line">vim .bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/home/dachuang/Downloads/CppWeb/Lesson06/library/lib</span><br><span class="line"></span><br><span class="line">. .bashrc</span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"><span class="comment"># root</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/home/dachuang/Downloads/CppWeb/Lesson06/library/lib</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># don't set both user level and system level </span></span><br><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line"><span class="comment"># /home/dachuang/Downloads/CppWeb/Lesson06/library/lib</span></span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># /lib /usr/lib don't recommend using</span></span><br></pre></td></tr></table></figure></div>

<h3 id="静态库和动态库的对比"><a href="#静态库和动态库的对比" class="headerlink" title="静态库和动态库的对比"></a>静态库和动态库的对比</h3><p>静态库的优缺点</p>
<ul>
<li>优点<ul>
<li>小-&gt;静态库</li>
<li>大-&gt;动态库</li>
<li>静态库加载速度更快，</li>
<li>发布程序无需提供静态库，发布方便</li>
</ul>
</li>
<li>缺点<ul>
<li>消耗系统资源</li>
<li>浪费内存</li>
<li>更新，部署，发布麻烦（需要重新编译）<br>动态库的优缺点</li>
</ul>
</li>
<li>优点<ul>
<li>进程间资源共享</li>
<li>更新部署发布简单（只用重新编译动态库，不用重编app）</li>
<li>可以控制何时加载动态库</li>
</ul>
</li>
<li>缺点<ul>
<li>加载速度相对慢</li>
<li>发布程序时需要提供依赖的动态库</li>
</ul>
</li>
</ul>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>一个 Makefile 文件中可以有一个或者多个规则</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">obj : rely</span><br><span class="line">    command</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></div>
<p>检查更新：目标与依赖文件的更新时间<br>预定义变量</p>
<ul>
<li>AR=ar</li>
<li>CC=cc</li>
<li>CXX=g++</li>
<li>$@：目标的完整名称</li>
<li>$＜：第一个依赖文件的名称</li>
<li>$^：所有的依赖文件</li>
<li>$(变量名）</li>
<li>Wildcard 通配符</li>
<li>Patsubst 替换<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> ./*.cpp)</span> </span><br><span class="line">objs = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, %.o,<span class="variable">$(src)</span>)</span> </span><br><span class="line">target=app</span><br><span class="line"><span class="variable">$(target)</span>:<span class="variable">$(objs)</span></span><br><span class="line">    <span class="variable">$(CXX)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.cpp</span></span><br><span class="line">    <span class="variable">$(CXX)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm <span class="variable">$(objs)</span> -f </span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -g -Wall program.c -o program</span><br><span class="line"></span><br><span class="line">gdb </span><br><span class="line">quit</span><br><span class="line"><span class="built_in">set</span> args 10 20</span><br><span class="line">show args</span><br><span class="line"><span class="built_in">help</span></span><br><span class="line">list/l</span><br><span class="line">show list/listsize</span><br><span class="line"><span class="built_in">set</span> list/listsize 行数</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">break</span>/b</span><br><span class="line">info <span class="built_in">break</span></span><br><span class="line"><span class="built_in">break</span>/b file:func</span><br><span class="line"><span class="built_in">break</span>/b file:line</span><br><span class="line">d/delete Num of <span class="built_in">break</span></span><br><span class="line"><span class="built_in">disable</span>/enable Num of <span class="built_in">break</span></span><br><span class="line">b/break 16 <span class="keyword">if</span> i=5</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">run</span><br><span class="line">c/continue</span><br><span class="line">n/next (won<span class="string">'t enter func) vs s/step</span></span><br><span class="line"><span class="string">p/print</span></span><br><span class="line"><span class="string">ptype</span></span><br><span class="line"><span class="string">display num</span></span><br><span class="line"><span class="string">i/info display</span></span><br><span class="line"><span class="string">undisplay</span></span><br><span class="line"><span class="string">set var </span></span><br><span class="line"><span class="string">until</span></span><br></pre></td></tr></table></figure></div>
<h3 id="标准C库IO函数和Linux系统IO函数对比"><a href="#标准C库IO函数和Linux系统IO函数对比" class="headerlink" title="标准C库IO函数和Linux系统IO函数对比"></a>标准C库IO函数和Linux系统IO函数对比</h3><p>C库调用Linux的IO API<br>C 的函数有缓冲区，系统IO无buffer</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">fflush</span><br><span class="line"><span class="comment">/* buffer filled (8k) */</span></span><br><span class="line">flose</span><br><span class="line"><span class="title function_">return</span><span class="params">()</span></span><br><span class="line"><span class="title function_">exit</span><span class="params">()</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">File* fp</span><br><span class="line"><span class="type">int</span> _fileno;</span><br><span class="line"><span class="type">char</span>* _IO_read_ptr;        <span class="comment">/* Current read pointer */</span></span><br><span class="line"><span class="type">char</span>* _IO_read_end;        <span class="comment">/* End of get area. */</span></span><br><span class="line"><span class="type">char</span>* _IO_read_base;        <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line"><span class="type">char</span>* _IO_write_base;        <span class="comment">/* Start of put area. */</span></span><br><span class="line"><span class="type">char</span>* _IO_write_ptr;        <span class="comment">/* Current put pointer. */</span></span><br><span class="line"><span class="type">char</span>* _IO_write_end;        <span class="comment">/* End of put area. */</span></span><br><span class="line"><span class="type">char</span>* _IO_buf_base;        <span class="comment">/* Start of reserve area. */</span></span><br><span class="line"><span class="type">char</span>* _IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line"><span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line"><span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line"><span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line"><span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br></pre></td></tr></table></figure></div>

<h3 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h3><p>MMU 虚拟地址映射到真实地址<br>0-3G 用户区</p>
<ul>
<li>0-4k 保护区</li>
<li>.text</li>
<li>data</li>
<li>heap 由低到高</li>
<li>Stack &lt; heap 由高到低</li>
<li>Args<br>3G-4G内核区</li>
<li>内存管理</li>
<li>进程管理</li>
<li>设备驱动</li>
<li>Virtual File System</li>
</ul>
<h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>PCB 文件描述符表 1024</p>
<blockquote>
<p>0 STDIN_FILENO<br>1 STDOUT_FILENO<br>2 STDERR_FILENO</p>
</blockquote>
<p>Fopen 同一个文件的文件描述符不同，打开最小的文件描述符</p>
<h3 id="open创建新文件"><a href="#open创建新文件" class="headerlink" title="open创建新文件"></a>open创建新文件</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 2 open</span><br><span class="line"><span class="built_in">umask</span> 022 <span class="comment"># set umask</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">@param flags: O_RDONLY, O_WRONLY, O_RDWR optionly O_CREAT</span></span><br><span class="line"><span class="comment">@param mode: mode(oct num rwxrwxrwx) of file is (mode &amp; ~umask)</span></span><br><span class="line"><span class="comment">int open(const char *pathname, int flags, mode_t mode);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"create.txt"</span>, O_RDWR | O_CREAT, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd==<span class="number">-1</span>) perror(<span class="string">"open"</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="read、write函数"><a href="#read、write函数" class="headerlink" title="read、write函数"></a>read、write函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 2 <span class="built_in">read</span></span><br><span class="line">man 2 write</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// copyfile.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> srcfd = open(<span class="string">"english.txt"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (srcfd==<span class="number">-1</span>) {perror(<span class="string">"open"</span>);<span class="keyword">return</span> <span class="number">-1</span>;}</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dstfd = open(<span class="string">"cpy.txt"</span>, O_WRONLY|O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span> (dstfd==<span class="number">-1</span>) {perror(<span class="string">"open"</span>);<span class="keyword">return</span> <span class="number">-1</span>;}</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len = read(srcfd, buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span> ) write(dstfd, buf, len);</span><br><span class="line">    close(dstfd);</span><br><span class="line">    close(srcfd);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 2 lseek</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">@param offset </span></span><br><span class="line"><span class="comment">@param whence </span></span><br><span class="line"><span class="comment">    SEEK_SET: </span></span><br><span class="line"><span class="comment">    SEEK_CUR: current  + offset</span></span><br><span class="line"><span class="comment">    SEEK_END: file_end + offset</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line">lseek(fd, <span class="number">0</span>, SEEK_SET); <span class="comment">//文件头</span></span><br><span class="line">lseek(fd, <span class="number">0</span>, SEEK_CUR); <span class="comment">//当前文件位置</span></span><br><span class="line">lseek(fd, <span class="number">0</span>, SEEK_END); <span class="comment">//file end</span></span><br><span class="line">lseek(fd, <span class="number">100</span>, SEEK_END); <span class="comment">//extend file, 需要写入数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">"hello.txt"</span>, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span> (fd==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> ret = lseek(fd, <span class="number">100</span>, SEEK_END);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"lseek"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        write(fd, <span class="string">" "</span>, <span class="number">1</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="stat、lstat函数"><a href="#stat、lstat函数" class="headerlink" title="stat、lstat函数"></a>stat、lstat函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 2 <span class="built_in">stat</span></span><br><span class="line"><span class="built_in">stat</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="keyword">struct</span> stat *statbuf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fstat</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *statbuf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="keyword">struct</span> stat *statbuf)</span>;</span><br><span class="line"></span><br><span class="line">truct stat {</span><br><span class="line">   <span class="type">dev_t</span>     st_dev;         <span class="comment">/* ID of device containing file */</span></span><br><span class="line">   <span class="type">ino_t</span>     st_ino;         <span class="comment">/* Inode number */</span></span><br><span class="line">   <span class="type">mode_t</span>    st_mode;        <span class="comment">/* File type and mode */</span></span><br><span class="line">   <span class="number">0</span><span class="number">-2</span>: others</span><br><span class="line">   <span class="number">3</span><span class="number">-5</span>: group</span><br><span class="line">   <span class="number">6</span><span class="number">-8</span>: user</span><br><span class="line">   <span class="number">9</span><span class="number">-11</span>:特殊权限位</span><br><span class="line">   <span class="number">12</span><span class="number">-15</span>:文件类型</span><br><span class="line">   <span class="type">nlink_t</span>   st_nlink;       <span class="comment">/* Number of hard links */</span></span><br><span class="line">   <span class="type">uid_t</span>     st_uid;         <span class="comment">/* User ID of owner */</span></span><br><span class="line">   <span class="type">gid_t</span>     st_gid;         <span class="comment">/* Group ID of owner */</span></span><br><span class="line">   <span class="type">dev_t</span>     st_rdev;        <span class="comment">/* Device ID (if special file) */</span></span><br><span class="line">   <span class="type">off_t</span>     st_size;        <span class="comment">/* Total size, in bytes */</span></span><br><span class="line">   <span class="type">blksize_t</span> st_blksize;     <span class="comment">/* Block size for filesystem I/O */</span></span><br><span class="line">   <span class="type">blkcnt_t</span>  st_blocks;      <span class="comment">/* Number of 512B blocks allocated */</span></span><br><span class="line">   <span class="comment">/* Since Linux 2.6, the kernel supports nanosecond</span></span><br><span class="line"><span class="comment">      precision for the following timestamp fields.</span></span><br><span class="line"><span class="comment">      For the details before Linux 2.6, see NOTES. */</span></span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">st_atim</span>;</span>  <span class="comment">/* Time of last access */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">st_mtim</span>;</span>  <span class="comment">/* Time of last modification */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">st_ctim</span>;</span>  <span class="comment">/* Time of last status change */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> st_atime st_atim.tv_sec      <span class="comment">/* Backward compatibility */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> st_mtime st_mtim.tv_sec</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> st_ctime st_ctim.tv_sec</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statbuf</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = stat(<span class="string">"a.txt"</span>, &amp;statbuf);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"stat"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: %ld\n"</span>, statbuf.st_size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s a.txt b.txt</span><br><span class="line">lstat 获取软连接到文件的信息</span><br></pre></td></tr></table></figure></div>

<h3 id="模拟实现-ls-l-命令"><a href="#模拟实现-ls-l-命令" class="headerlink" title="模拟实现 ls -l 命令"></a>模拟实现 ls -l 命令</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * simulate ls -l command</span></span><br><span class="line"><span class="comment"> * @param argc number of arguments</span></span><br><span class="line"><span class="comment"> * @param argv value of arguments</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> {</span><br><span class="line">    <span class="keyword">if</span> (argc&lt;<span class="number">2</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// access file state</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statbuf</span>;</span></span><br><span class="line">    <span class="keyword">if</span>( stat(argv[<span class="number">1</span>], &amp;statbuf) == <span class="number">-1</span> ) {</span><br><span class="line">        perror(<span class="string">"stat"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    } </span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> perms[] = <span class="string">"-rwxrwxrwx"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) <span class="keyword">if</span> ( ~(statbuf.st_mode&gt;&gt;i)&amp;<span class="number">1</span>) perms[<span class="number">9</span>-i] = <span class="string">'-'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * time = ctime(&amp;statbuf.st_mtime);</span><br><span class="line">    <span class="type">char</span> mtime[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">strncpy</span>(mtime, time, <span class="built_in">strlen</span>(time)<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %ld %s %s %ld %s %s\n"</span>, perms, statbuf.st_nlink, getpwuid(statbuf.st_uid)-&gt;pw_name, getgrgid(statbuf.st_gid)-&gt;gr_name, statbuf.st_size, mtime, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="文件属性操作函数"><a href="#文件属性操作函数" class="headerlink" title="文件属性操作函数"></a>文件属性操作函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 2 access</span><br><span class="line">man 2 <span class="built_in">chmod</span></span><br><span class="line">man 2 <span class="built_in">chown</span></span><br><span class="line">man 2 <span class="built_in">truncate</span></span><br></pre></td></tr></table></figure></div>

<h3 id="目录操作函数"><a href="#目录操作函数" class="headerlink" title="目录操作函数"></a>目录操作函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 2 <span class="built_in">mkdir</span></span><br><span class="line">man 2 <span class="built_in">rmdir</span></span><br><span class="line">man 2 rename</span><br><span class="line">man 2 <span class="built_in">chdir</span></span><br><span class="line">man 2 getcwd</span><br></pre></td></tr></table></figure></div>

<h3 id="目录遍历函数"><a href="#目录遍历函数" class="headerlink" title="目录遍历函数"></a>目录遍历函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">DIR *<span class="title function_">opendir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="keyword">struct</span> dirent *<span class="title function_">readdir</span><span class="params">(DIR *dirp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">closedir</span><span class="params">(DIR *dirp)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getFileNum</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * path)</span>;</span><br><span class="line"><span class="comment">// 读取某个目录下所有的普通文件的个数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> {</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s path\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> num = getFileNum(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"普通文件的个数为：%d\n"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获取目录下所有普通文件的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getFileNum</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * path)</span> {</span><br><span class="line">    <span class="comment">// 1.打开目录</span></span><br><span class="line">    DIR * dir = opendir(path);</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>) {</span><br><span class="line">        perror(<span class="string">"opendir"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="comment">// 记录普通文件的个数</span></span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ptr = readdir(dir)) != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="comment">// 获取名称</span></span><br><span class="line">        <span class="type">char</span> * dname = ptr-&gt;d_name;</span><br><span class="line">        <span class="comment">// 忽略掉. 和..</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(dname, <span class="string">"."</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dname, <span class="string">".."</span>) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 判断是否是普通文件还是目录</span></span><br><span class="line">        <span class="keyword">if</span>(ptr-&gt;d_type == DT_DIR) {</span><br><span class="line">            <span class="comment">// 目录,需要继续读取这个目录</span></span><br><span class="line">            <span class="type">char</span> newpath[<span class="number">256</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(newpath, <span class="string">"%s/%s"</span>, path, dname);</span><br><span class="line">            total += getFileNum(newpath);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(ptr-&gt;d_type == DT_REG) total++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 关闭目录</span></span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="dup-dup2-函数"><a href="#dup-dup2-函数" class="headerlink" title="dup, dup2 函数"></a>dup, dup2 函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">The  dup()  system  call  creates  a copy of the file descriptor oldfd, using the lowest-numbered unused file descriptor for the  new  descriptor.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dup</span><span class="params">(<span class="type">int</span> oldfd)</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">The  dup2() system call performs the same task as dup(), but instead of using the lowest-numbered unused file  descriptor,  it  uses  the  file descriptor number specified in newfd.  If the file descriptor newfd was previously open, it is silently closed before being reused.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dup2</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"a.txt"</span>, O_RDWR | O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 =dup2(fd, dup(fd));</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd:%d, fd1:%d\n"</span>, fd, fd1);</span><br><span class="line">    <span class="type">char</span> *str = <span class="string">"helloworld"</span>;</span><br><span class="line">    <span class="keyword">if</span>( write(fd1, str, <span class="built_in">strlen</span>(str)) ==<span class="number">-1</span> ) {</span><br><span class="line">        perror(<span class="string">"write"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    close(fd1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"a.txt"</span>, O_RDWR | O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">"b.txt"</span>, O_RDWR|O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd==<span class="number">-1</span> | fd1==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd2 =dup2(fd, fd1);</span><br><span class="line">    <span class="type">char</span> *str = <span class="string">"helloworld"</span>;</span><br><span class="line">    <span class="keyword">if</span>( write(fd1, str, <span class="built_in">strlen</span>(str)) ==<span class="number">-1</span> ) {</span><br><span class="line">        perror(<span class="string">"write"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd:%d, fd1:%d, fd2:%d\n"</span>, fd, fd1, fd2);</span><br><span class="line">    close(fd2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">fcntl() performs one of the operations described below on the open file</span></span><br><span class="line"><span class="comment">       descriptor fd.  The operation is determined by cmd.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, ... <span class="comment">/* arg */</span> )</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.复制文件描述符</span></span><br><span class="line">    <span class="comment">// int fd = open("1.txt", O_RDONLY);</span></span><br><span class="line">    <span class="comment">// int ret = fcntl(fd, F_DUPFD);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.修改或者获取文件状态flag</span></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"1.txt"</span>, O_RDWR|O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件描述符状态flag</span></span><br><span class="line">    <span class="type">int</span> flag = fcntl(fd, F_GETFL);</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"fcntl"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    flag |= O_APPEND;   <span class="comment">// flag = flag | O_APPEND</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改文件描述符状态的flag，给flag加入O_APPEND这个标记</span></span><br><span class="line">    <span class="type">int</span> ret = fcntl(fd, F_SETFL, flag);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"fcntl"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * str = <span class="string">"nihao"</span>;</span><br><span class="line">    write(fd, str, <span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ WebServer 3 Linux 多线程开发</title>
    <url>/2022/12/17/WebServerNote/webserver-note3/</url>
    <content><![CDATA[<h3 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h3><ul>
<li>与进程 (process)类似。线程(thread）是允许应用程序并发执行多个任务的一种机制。一个进程可以包含多个线程。同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区城，其中包括初始化数据段、未初始化数据段，以及堆内存段。（传统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程）</li>
<li>进程是 CPU 分配资源的最小单位</li>
<li>线程是操作系统调度执行的最小单位。</li>
<li>线程是轻量级的进程 (IWP：Light weight Process)，在Iinux 环境下线程的本质仍是进程。</li>
<li>查看指定进程的 IWP 号：<code>ps -Lf $(pid)</code></li>
<li>进程间的信息难以共享。由于除去只读代码段外，父子进程并末共享内存，因此必须采用一些进程间通信方式，在进程问进行信息交换。</li>
<li>调用fork(）来创建进程的代价相对较高，即便利用马时复制技术，仍热需要复制诸如内存页表和文件描述符表之类的多种进程属性，这意味着 foIk(）调用在时间上的开销依然不菲。</li>
<li>线程之间能够方便、快速地共享信息。只需将数据复制到共享（全局或堆）变量中即可。</li>
<li>创建线程比创建进程通常要快 10倍甚至更多。线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表。</li>
<li>共享资源<ul>
<li>进程ID，父进程ID</li>
<li>进程组ID，会话ID</li>
<li>用户ID，用户组ID</li>
<li>文件描述符表</li>
<li>信号处置</li>
<li>文件系统的相关信息umask，path</li>
<li>虚拟空间地址（除栈，.text）</li>
</ul>
</li>
<li>非共享资源<ul>
<li>线程ID</li>
<li>信号掩码</li>
<li>线程特有数据</li>
<li>error变量</li>
<li>实时调度策略和优先级</li>
<li>栈、本地变量和调用链接信息<br>NPTL：Native POSIX Thread Library<br><code>getconf GNU_LIBPTHREAD_VERSION</code></li>
</ul>
</li>
</ul>
<h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pthread_create.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">callback</span><span class="params">( <span class="type">void</span> * arg)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread ..."</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        <span class="type">char</span>* errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error: %s"</span>, errstr);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc pthread_create.c -o create -pthread</span><br><span class="line"><span class="comment"># or gcc pthread_create.c -o create -l pthread</span></span><br></pre></td></tr></table></figure></div>

<h3 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pthread_exit.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">callback</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread: tid:%ld\n"</span>, pthread_self());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        <span class="type">char</span> *errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, errstr);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"father thread, tid: %ld, child thread id:%ld\n"</span>, pthread_self(), tid);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让主线程退出，当主线程退出时，不会影响其他正常运行的线程，</span></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="连接已终止的线程"><a href="#连接已终止的线程" class="headerlink" title="连接已终止的线程"></a>连接已终止的线程</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> value = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">callback</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread: tid:%ld\n"</span>, pthread_self());</span><br><span class="line">    <span class="comment">//sleep(3);</span></span><br><span class="line"><span class="comment">//    int value = 10;</span></span><br><span class="line"><span class="comment">// don't pass local variable</span></span><br><span class="line">    pthread_exit(&amp;value);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        <span class="type">char</span> *errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, errstr);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"father thread, tid: %ld, child thread id:%ld\n"</span>, pthread_self(), tid);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *thread_ret;</span><br><span class="line">    ret = pthread_join(tid, (<span class="type">void</span>**)&amp;thread_ret);</span><br><span class="line">    <span class="keyword">if</span> (ret!=<span class="number">0</span>) {</span><br><span class="line">        <span class="type">char</span> *errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, errstr);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread exit value:%d\n"</span>, *thread_ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="线程的分离"><a href="#线程的分离" class="headerlink" title="线程的分离"></a>线程的分离</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pthread_detach</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">callback</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread id:%ld\n"</span>, pthread_self());</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret!=<span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strerror(ret));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tid: %ld, main thread id:%ld\n"</span>, tid, pthread_self());</span><br><span class="line">    <span class="comment">// 设置子线程分离，子线程分离后，子线程结束时对应的资源就不需要主线程释放,不能再链接</span></span><br><span class="line">    pthread_detach(tid);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="线程取消"><a href="#线程取消" class="headerlink" title="线程取消"></a>线程取消</h3><p>只有当子线程执行到取消点时，线程才会终止（系统调用，用户区到内核区）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">callback</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread id:%ld\n"</span>, pthread_self());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"child thread id:%ld\n"</span>, pthread_self());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret!=<span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strerror(ret));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pthread_cancel(tid);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tid: %ld, main thread id:%ld\n"</span>, tid, pthread_self());</span><br><span class="line">    <span class="comment">// 设置子线程分离，子线程分离后，子线程结束时对应的资源就不需要主线程释放,不能再链接</span></span><br><span class="line">    pthread_detach(tid);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h3><blockquote>
<p>#include &lt;pthread.h&gt;<br>     int<br>     pthread_attr_init(pthread_attr_t *attr);<br>     int<br>     pthread_attr_destroy(pthread_attr_t *attr);<br>     int<br>     pthread_attr_setstack(pthread_attr_t *attr,  void *stackaddr,<br>         size_t stacksize);<br>     int<br>     pthread_attr_getstack(const pthread_attr_t * restrict attr,<br>         void ** restrict stackaddr, size_t * restrict stacksize);</p>
</blockquote>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pthread_attr.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">callback</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child thread id:%ld\n"</span>, pthread_self());</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, &amp;attr, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret!=<span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strerror(ret));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pthread_attr_getstacksize(&amp;attr, &amp;size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stacksize %ld\n"</span>, size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tid: %ld, main thread id:%ld\n"</span>, tid, pthread_self());</span><br><span class="line">    <span class="comment">// 设置子线程分离，子线程分离后，子线程结束时对应的资源就不需要主线程释放,不能再链接</span></span><br><span class="line">    pthread_detach(tid);</span><br><span class="line">    pthread_attr_destroy(&amp;attr); </span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sellTickets.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">sell</span><span class="params">(<span class="type">void</span> * args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(tickets&gt;<span class="number">0</span>) {</span><br><span class="line">        usleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"tid: %ld, Selling ticket :%d\n"</span>, pthread_self(), tickets);</span><br><span class="line">        tickets--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2, tid3;</span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid3, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_detach(tid1);</span><br><span class="line">    pthread_detach(tid2);</span><br><span class="line">    pthread_detach(tid3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>临界区<br>Atomic</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>Mutual exclusion<br>Locked, unlocked</p>
<ul>
<li>一旦线程锁定互斥量，随即成为该互斥量的所有者，只有所有者才能给互斥量解锁。一般情况下，对每一共享资源（可能由多个相关变量组成）会使用不同的互斥量，每一线程在访问同一资源时将采用如下协议：<ul>
<li>针对共享资源锁定互斥量</li>
<li>访问共享资源</li>
<li>对互斥量解锁<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tickets = <span class="number">1000</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">sell</span><span class="params">(<span class="type">void</span> * args)</span> {</span><br><span class="line">    <span class="comment">// lock</span></span><br><span class="line">    <span class="keyword">while</span>(tickets&gt;<span class="number">0</span>) {</span><br><span class="line">        </span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span> (tickets&gt;<span class="number">0</span>) {</span><br><span class="line">            usleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"tid: %ld, Selling ticket :%d\n"</span>, pthread_self(), tickets);</span><br><span class="line">            tickets--;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2, tid3;</span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid3, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_detach(tid1);</span><br><span class="line">    pthread_detach(tid2);</span><br><span class="line">    pthread_detach(tid3);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul>
<li>有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生死锁。</li>
<li>﻿两个或两个以上的进程在执行过程中，因年李共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。</li>
<li>死锁的几种场景：<ul>
<li>忘记释放锁</li>
<li>重复加锁</li>
<li>多线程多锁，抢占锁资源<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// deadlock.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tickets = <span class="number">1000</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">sell</span><span class="params">(<span class="type">void</span> * args)</span> {</span><br><span class="line">    <span class="comment">// lock</span></span><br><span class="line">    <span class="keyword">while</span>(tickets&gt;<span class="number">0</span>) {</span><br><span class="line">        </span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span> (tickets&gt;<span class="number">0</span>) {</span><br><span class="line">            usleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"tid: %ld, Selling ticket :%d\n"</span>, pthread_self(), tickets);</span><br><span class="line">            tickets--;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// pthread_mutex_unlock(&amp;mutex);</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2, tid3;</span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid3, <span class="literal">NULL</span>, sell, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_detach(tid1);</span><br><span class="line">    pthread_detach(tid2);</span><br><span class="line">    pthread_detach(tid3);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// deadlock1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建2个互斥量</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex1, mutex2;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">workA</span><span class="params">(<span class="type">void</span> * arg)</span> {</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;mutex1);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pthread_mutex_lock(&amp;mutex2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"workA....\n"</span>);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex2);</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex1);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">workB</span><span class="params">(<span class="type">void</span> * arg)</span> {</span><br><span class="line">    pthread_mutex_lock(&amp;mutex2);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pthread_mutex_lock(&amp;mutex1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"workB....\n"</span>);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex1);</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化互斥量</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;mutex2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建2个子线程</span></span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2;</span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, workA, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, workB, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收子线程资源</span></span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放互斥量资源</span></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex1);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><ul>
<li>在对数据的读写操作中，更多的是读操作：写操作较少，例如对数据库数据的读写应用。为了满足当前能够允许多个读出，但只允许一个写入的需求，线程提供了读写锁来实现。</li>
<li>读写锁的特点：<ul>
<li>如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作。</li>
<li>如果有其它线程写数据，则其它线程都不允许读、写操作。</li>
<li>写是独占的，写的优先级高。<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rwlock.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_rwlock_t</span> rwlock;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">writeNum</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        pthread_rwlock_wrlock(&amp;rwlock);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"write, tid:%ld, num:%d\n"</span>, pthread_self(), num);</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">         usleep(<span class="number">100</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">readNum</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        pthread_rwlock_rdlock(&amp;rwlock);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"write, tid:%ld, num:%d\n"</span>, pthread_self(), num);</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        usleep(<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    pthread_rwlock_init(&amp;rwlock, <span class="literal">NULL</span>); </span><br><span class="line">    <span class="type">pthread_t</span> wtids[<span class="number">3</span>], rtids[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) {</span><br><span class="line">        pthread_create(&amp;wtids[i], <span class="literal">NULL</span>, writeNum, <span class="literal">NULL</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        pthread_create(&amp;rtids[i], <span class="literal">NULL</span>, readNum, <span class="literal">NULL</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) {</span><br><span class="line">        pthread_detach(wtids[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        pthread_detach(rtids[i]);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    pthread_rwlock_destroy(&amp;rwlock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="生产者和消费者模型"><a href="#生产者和消费者模型" class="headerlink" title="生产者和消费者模型"></a>生产者和消费者模型</h3><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pthread_cond.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">}Node;</span><br><span class="line"></span><br><span class="line">Node* head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producor</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">         Node* newNode = (Node* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">         newNode-&gt;next = head;</span><br><span class="line">         head = newNode;</span><br><span class="line">         newNode-&gt;num = rand() % <span class="number">1000</span>;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"producor tid:%ld, add node:%d\n"</span>, pthread_self(), newNode-&gt;num); </span><br><span class="line">         pthread_cond_signal(&amp;cond);</span><br><span class="line">         pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">         usleep(<span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">customer</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span>(!head) {</span><br><span class="line">            <span class="comment">// when calling wait blocked lock, after unblock, unlock.</span></span><br><span class="line">            pthread_cond_wait(&amp;cond, &amp;mutex); </span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        Node* node = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"del node, num:%d, tid:%ld\n"</span>, node-&gt;num, pthread_self());</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;cond, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">pthread_t</span> ptids[<span class="number">5</span>], ctids[<span class="number">5</span>]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        pthread_create(&amp;ptids[i], <span class="literal">NULL</span>, producor, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_detach(ptids[i]);</span><br><span class="line">        pthread_create(&amp;ctids[i], <span class="literal">NULL</span>, customer, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_detach(ctids[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_destroy(&amp;cond);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// semaphore.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">}Node;</span><br><span class="line"></span><br><span class="line">Node* head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">sem_t</span> psem, csem ;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producor</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        sem_wait(&amp;psem);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">         Node* newNode = (Node* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">         newNode-&gt;next = head;</span><br><span class="line">         head = newNode;</span><br><span class="line">         newNode-&gt;num = rand() % <span class="number">1000</span>;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"producor tid:%ld, add node:%d\n"</span>, pthread_self(), newNode-&gt;num); </span><br><span class="line">         pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">         sem_post(&amp;csem);</span><br><span class="line">         usleep(<span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">customer</span><span class="params">(<span class="type">void</span>* args)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        sem_wait(&amp;csem);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        Node* node = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"del node, num:%d, tid:%ld\n"</span>, node-&gt;num, pthread_self());</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sem_post(&amp;psem);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    sem_init(&amp;psem, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    sem_init(&amp;csem, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">pthread_t</span> ptids[<span class="number">5</span>], ctids[<span class="number">5</span>]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        pthread_create(&amp;ptids[i], <span class="literal">NULL</span>, producor, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_detach(ptids[i]);</span><br><span class="line">        pthread_create(&amp;ctids[i], <span class="literal">NULL</span>, customer, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_detach(ctids[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ WebServer 4 Linux 网络编程</title>
    <url>/2022/12/17/WebServerNote/webserver-note4/</url>
    <content><![CDATA[<h3 id="网络结构模式"><a href="#网络结构模式" class="headerlink" title="网络结构模式"></a>网络结构模式</h3><p>C/S 结构<br>MAC地址、IP地址、端口<br>MAC地址48位，OSI第二层（数据链路层）<br>网卡（以太网、无线网）功能：</p>
<ol>
<li>数据的封装与解封装</li>
<li>链路管理</li>
<li>数据编码与译码</li>
</ol>
<p>MAC:<br>前三个字节：制造商<br>后三个字节：制造商的某个产品<br>ifconfig</p>
<p>IP<br>A<br>1.0.0.1<br>126.255.255.254<br>10.<em>（私有地址）<br>B<br>128.0.0.1<br>191.255.255.254<br>172.16～172.31<br>C<br>192.0.0.1<br>233.255.255.254<br>192.168.</em></p>
<p>网络IP + 主机IP<br>网络地址，广播地址。<br>A类126个<br>B类16384个网络<br>127.* 测试回路<br>子网掩码</p>
<p>Port<br>标识进程，一个应用程序可有多个进程<br>虚拟端口 物理端口（接口）<br>65535个<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="2ex" role="img" focusable="false" viewBox="0 -883.9 1290.1 883.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container><br>0-1023 周知端口<br>1024-49151:注册端口<br>私有/动态端口<br>4.4 网络模型<br>OSI7层网络模型</p>
<ul>
<li>应用层 应用程序</li>
<li>表示层 数据的表示、安全、压缩</li>
<li>会话层 建立、管理和连接会话</li>
<li>传输层 建立、管理和维护端到端的链接，传输数据的协议、端口号，TCP/UDP 段</li>
<li>网络层 IP选址和路由选择</li>
<li>数据链路层 建立逻辑连接，介质访问和链路管理LLC+MAC，差错检验，帧</li>
<li>物理层 比特<br>TCP/IP协议族<br>应用层：<br>传输层：TCP、UDP<br>网络层：IP，ICMP，IGMP<br>网络接口层：ARP，RARP<br>上层协议使用下层协议的服务</li>
</ul>
<h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>协议，网络协议的简称，网络协议是通信计算机双方必须共同遵从的一组約定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。它的三要素是：语法、语义、时序。为了使数据在网络上从源到达目的，网络通信的参与方必须遵循相同的规则，这套规则称为协议。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">netstat</span><br><span class="line">ps aux | grep ssh</span><br></pre></td></tr></table></figure></div>
<p>UDP:</p>
<blockquote>
<p>16位端口号，16位目的端口号<br>16位UDP长度，16位校验和</p>
</blockquote>
<p>TCP:</p>
<blockquote>
<p>16位元端口，16位目的端口<br>32位序号<br>32位确认号<br>URG，ACK，PSH，RST，SYN，FIN；16位窗口大小<br>16位校验和，16位紧急指针</p>
</blockquote>
<p>IP:</p>
<blockquote>
<p>16位总字节数<br>16位标识，3位标识，13位偏移<br>8位TTL，8位协议（上层的协议）<br>网络通信的过程<br>封装，分用（解析下层协议中的头来传送给对应的上层协议）</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">arp -a </span><br></pre></td></tr></table></figure></div>

<h3 id="socket-介绍"><a href="#socket-介绍" class="headerlink" title="socket 介绍"></a>socket 介绍</h3><p>文件描述符，读写缓冲区<br>服务器端<br>客户端</p>
<h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><p>Big-Endian: 最高位在低地址处<br>Little-Endian：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// byteorder.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">        <span class="type">short</span> value;</span><br><span class="line">        <span class="type">char</span> bytes[<span class="keyword">sizeof</span>(<span class="type">short</span>)];</span><br><span class="line">    }test;</span><br><span class="line"></span><br><span class="line">    test.value = <span class="number">0x0102</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (test.bytes[<span class="number">0</span>]==<span class="number">1</span>) &amp;&amp; (test.bytes[<span class="number">1</span>]==<span class="number">2</span>) ) { </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Big-Endian"</span>);</span><br><span class="line">    }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Little-Endian"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="字节序转换函数"><a href="#字节序转换函数" class="headerlink" title="字节序转换函数"></a>字节序转换函数</h3><p>网络字节序：Big-Endian</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span> <span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span> <span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span> <span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span> <span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// htons</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> a = <span class="number">0x0102</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">": %x\n"</span>, a); <span class="comment">//102</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> b = htons(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b : %x\n"</span>, b); <span class="comment">//201</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//htonl 裝換IP</span></span><br><span class="line">    <span class="type">char</span> buf [<span class="number">4</span>] = {<span class="number">192</span>, <span class="number">168</span>,  <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> num = *(<span class="type">int</span> *)buf;</span><br><span class="line">    <span class="type">int</span> sum = hton1 (num);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *p = (<span class="type">char</span> *)&amp;sum;</span><br><span class="line">    <span class="number">34</span></span><br><span class="line">    <span class="number">35</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>, *p, * (p+<span class="number">1</span>), * (p+<span class="number">2</span>), *(p+<span class="number">3</span>));<span class="comment">// 100 1 168 192</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="socket-地址"><a href="#socket-地址" class="headerlink" title="socket 地址"></a>socket 地址</h3><h3 id="IP-地址转换函数"><a href="#IP-地址转换函数" class="headerlink" title="IP 地址转换函数"></a>IP 地址转换函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_pton</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">void</span> *dst)</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">inet_ntop</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">void</span> *src,</span></span><br><span class="line"><span class="params">                             <span class="type">char</span> *dst, <span class="type">socklen_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iptrans.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">char</span> buf[] = <span class="string">"192.168.10.14"</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    inet_pton(AF_INET, buf, &amp;num);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *p = (<span class="type">unsigned</span> <span class="type">char</span>*)&amp;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d.%d.%d.%d\n"</span>, p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>], p[<span class="number">3</span>]);</span><br><span class="line">    <span class="type">char</span> ip[<span class="number">16</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str = inet_ntop(AF_INET, &amp;num, ip, <span class="keyword">sizeof</span>(ip));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TCP-通信流程"><a href="#TCP-通信流程" class="headerlink" title="TCP 通信流程"></a>TCP 通信流程</h3><p>UDP: 无连接，单播、多播、广播，不可靠<br>TCP：面向连接的，可靠，面向字节流，仅支持单播传输<br>服务器端</p>
<ol>
<li>建立用于链接的监听套接字（文件描述符）</li>
<li>将监听的文件描述符和本地的IP和端口绑定</li>
<li>设置监听</li>
<li>阻塞等待</li>
<li>通信</li>
<li>通信结束，断开连接<br>客户端：</li>
<li>创建用于通信的套接字</li>
<li>连接服务器，指定IP和port</li>
<li>通信</li>
<li>通信结束，断开连接</li>
</ol>
<h3 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket 函数"></a>socket 函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> &lt;sys/types.h </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span> <span class="comment">// 包含了这个头交件，上面两个就可以省旺</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span> <span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>; <span class="comment">// create socket domain: protocal family, </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span>; <span class="comment">// /proc/sys/net/core/somaxconn</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">accept</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">connect</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span> ; </span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="TCP通信实现（服务器端）"><a href="#TCP通信实现（服务器端）" class="headerlink" title="TCP通信实现（服务器端）"></a>TCP通信实现（服务器端）</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// inet_pton(AF_INET, "127.0.0.1", saddr.sin_addr.s_addr);</span></span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    <span class="type">int</span> ret = bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ret = listen(lfd, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> len = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">    <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr,  &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (cfd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"accept"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> clientIP[<span class="number">16</span>];</span><br><span class="line">    inet_ntop(AF_INET,  &amp;clientaddr.sin_addr.s_addr, clientIP, <span class="keyword">sizeof</span>(clientIP));</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> clientPort = ntohs(clientaddr.sin_port);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"client ip is %s, port:%d\n"</span>, clientIP, clientPort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> recvBuf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="type">int</span> recvlen = read(cfd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">        <span class="keyword">if</span> (recvlen==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"read"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (recvlen&gt;<span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"received: %s\n"</span>, recvBuf);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"connection closed\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span> *sstr = <span class="string">"Hello, I'm server."</span>;</span><br><span class="line">        write(cfd, sstr, <span class="built_in">strlen</span>(sstr));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(cfd);</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TCP通信实现（客户端"><a href="#TCP通信实现（客户端" class="headerlink" title="TCP通信实现（客户端)"></a>TCP通信实现（客户端)</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientSockerAddr</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">"127.0.0.1"</span>, &amp;clientSockerAddr.sin_addr.s_addr);</span><br><span class="line">    clientSockerAddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    clientSockerAddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">int</span> ret =  connect(fd, (<span class="keyword">struct</span> sockaddr*)&amp;clientSockerAddr, <span class="keyword">sizeof</span>(clientSockerAddr));</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"connect"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *data = <span class="string">"Hello, I'm cllient."</span>;</span><br><span class="line">    write(fd, data, <span class="built_in">strlen</span>(data));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> recvBuf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="type">int</span> recvlen = read(fd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">    <span class="keyword">if</span> (recvlen==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"read"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span> (recvlen&gt;<span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"received message from server: %s\n"</span>, recvBuf);</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"server closed\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><h3 id="多进程实现并发服务器-1"><a href="#多进程实现并发服务器-1" class="headerlink" title="多进程实现并发服务器(1)"></a>多进程实现并发服务器(1)</h3><p>一个父进程，多个子进程<br>父进程：等待连接<br>子进程：完成通信</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server_process.c (1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (lfd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span><br><span class="line">    serverAddr.sin_family = AF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    serverAddr.sin_addr.s_addr =  INADDR_ANY;</span><br><span class="line">    <span class="type">int</span> ret = bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr));</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ret = listen(lfd, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">        <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">        <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">        <span class="keyword">if</span> (cfd==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"accept"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//child process for communication</span></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">0</span>) {</span><br><span class="line">            <span class="type">char</span> ip[<span class="number">16</span>] = {<span class="number">0</span>};</span><br><span class="line">            inet_ntop(AF_INET, &amp;clientAddr.sin_addr.s_addr, ip, <span class="keyword">sizeof</span>(ip));</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">short</span> port = ntohs(clientAddr.sin_port);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"client ip:%s, port:%d\n"</span>, ip, port);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//MARK: communication</span></span><br><span class="line">            <span class="type">char</span> recvBuf[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                <span class="type">int</span> len = read(cfd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">                <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">                    perror(<span class="string">"read"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"client closed\n"</span>);</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"server received message:%s\n"</span>, recvBuf);</span><br><span class="line">                }</span><br><span class="line">                write(cfd, recvBuf, <span class="built_in">strlen</span>(recvBuf));</span><br><span class="line">            }</span><br><span class="line">            close(cfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="多进程实现并发服务器-2"><a href="#多进程实现并发服务器-2" class="headerlink" title="多进程实现并发服务器(2)"></a>多进程实现并发服务器(2)</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server_process.c (2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">recycleChild</span><span class="params">(<span class="type">int</span> arg)</span> {</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> ret = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (ret==<span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"child %d was recyled\n"</span>, ret); </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    act.sa_handler = recycleChild;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> register sigchild signal</span></span><br><span class="line">    sigaction(SIGCHLD, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (lfd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span><br><span class="line">    serverAddr.sin_family = AF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    serverAddr.sin_addr.s_addr =  INADDR_ANY;</span><br><span class="line">    <span class="type">int</span> ret = bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr));</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ret = listen(lfd, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">        <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">        <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">        <span class="keyword">if</span> (cfd==<span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">if</span> (errno == EINTR) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                perror(<span class="string">"accept"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//child process for communication</span></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">0</span>) {</span><br><span class="line">            <span class="type">char</span> ip[<span class="number">16</span>] = {<span class="number">0</span>};</span><br><span class="line">            inet_ntop(AF_INET, &amp;clientAddr.sin_addr.s_addr, ip, <span class="keyword">sizeof</span>(ip));</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">short</span> port = ntohs(clientAddr.sin_port);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"client ip:%s, port:%d\n"</span>, ip, port);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//MARK: communication</span></span><br><span class="line">            <span class="type">char</span> recvBuf[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                <span class="type">int</span> len = read(cfd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">                <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">                    perror(<span class="string">"read"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"client closed\n"</span>);</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"server received message:%s\n"</span>, recvBuf);</span><br><span class="line">                }</span><br><span class="line">                write(cfd, recvBuf, <span class="built_in">strlen</span>(recvBuf));</span><br><span class="line">            }</span><br><span class="line">            close(cfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="多线程实现并发服务器"><a href="#多线程实现并发服务器" class="headerlink" title="多线程实现并发服务器"></a>多线程实现并发服务器</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server_thread.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> {</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">//file describor</span></span><br><span class="line">    <span class="type">pthread_t</span> tid; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> <span class="title">sockinfos</span>[128];</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">working</span><span class="params">(<span class="type">void</span>* arg)</span> {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> *<span class="title">pinfo</span> =</span> (<span class="keyword">struct</span> sockInfo*)arg;</span><br><span class="line">    <span class="type">char</span> ip[<span class="number">16</span>] = {<span class="number">0</span>};</span><br><span class="line">    inet_ntop(AF_INET, &amp;pinfo-&gt;addr.sin_addr.s_addr, ip, <span class="keyword">sizeof</span>(ip));</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> port = ntohs(pinfo-&gt;addr.sin_port);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"client ip:%s, port:%d\n"</span>, ip, port);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: communication</span></span><br><span class="line">    <span class="type">char</span> recvBuf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> len = read(pinfo-&gt;fd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"read"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"client closed\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"server received message:%s\n"</span>, recvBuf);</span><br><span class="line">        }</span><br><span class="line">        write(pinfo-&gt;fd, recvBuf, <span class="built_in">strlen</span>(recvBuf));</span><br><span class="line">    }</span><br><span class="line">    close(pinfo-&gt;fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (lfd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span><br><span class="line">    serverAddr.sin_family = AF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    serverAddr.sin_addr.s_addr =  INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MARK: binding</span></span><br><span class="line">    <span class="type">int</span> ret = bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr));</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MARK: Listen</span></span><br><span class="line">    ret = listen(lfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MARK: Initialize sockinfos</span></span><br><span class="line">    <span class="type">int</span> max = <span class="keyword">sizeof</span>(sockinfos)/<span class="keyword">sizeof</span>(sockinfos[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;max; i++) {</span><br><span class="line">        bzero(&amp;sockinfos[i], <span class="keyword">sizeof</span>(sockinfos[i]));</span><br><span class="line">        sockinfos[i].fd = <span class="number">-1</span>;</span><br><span class="line">        sockinfos[i].tid = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="comment">//MARK child thread processing child addr</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">        <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> *<span class="title">pinfo</span>;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;max; i++) {</span><br><span class="line">            <span class="keyword">if</span> (sockinfos[i].fd == <span class="number">-1</span>) {</span><br><span class="line">                pinfo = &amp;sockinfos[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i==max<span class="number">-1</span>) {</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                i--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        pinfo-&gt;fd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;pinfo-&gt;addr, &amp;clientAddr, <span class="keyword">sizeof</span>(clientAddr));</span><br><span class="line">        pthread_create(&amp;pinfo-&gt;tid, <span class="literal">NULL</span>, working, (<span class="type">void</span>*)pinfo);</span><br><span class="line">        pthread_detach(pinfo-&gt;tid);</span><br><span class="line">    }</span><br><span class="line">    close(lfd); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="TCP状态转换"><a href="#TCP状态转换" class="headerlink" title="TCP状态转换"></a>TCP状态转换</h3><h3 id="半关闭、端口复用"><a href="#半关闭、端口复用" class="headerlink" title="半关闭、端口复用"></a>半关闭、端口复用</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">netstat</span><br><span class="line">-a all</span><br><span class="line">-p 正在使用socket的程序的名称</span><br><span class="line">-n 直接显示ipaddress</span><br></pre></td></tr></table></figure></div>

<p>端口复用最常用的用途是：</p>
<ul>
<li>防止服务器重启时之前绑定的端口还未释放(TIME_WAIT)</li>
<li>程序突然退出而系统没有释放端口<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">     <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> socket, <span class="type">int</span> level, <span class="type">int</span> option_name,</span></span><br><span class="line"><span class="params">         <span class="type">const</span> <span class="type">void</span> *option_value, <span class="type">socklen_t</span> option_len)</span>;</span><br><span class="line"><span class="comment">// should be called before binding</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="IO多路复用简介"><a href="#IO多路复用简介" class="headerlink" title="IO多路复用简介"></a>IO多路复用简介</h3><p>IO多路复用/IO多路转接<br>IO多路复用使得程序能同时监控多个文件描述符，能够提高程序的性能，Linux下实现 I/0 多路复用的系统调用主要有 select、poll 和epoll.<br>阻塞等待，BIO模型<br>好处：不占CPU时间片<br>缺点：同一时刻只能处理一个操作<br>多线程或多进程<br>缺点：线程/进程调度消耗CPU资源<br>每个线程/进程一个Client<br>非阻塞，忙轮询，NIO模型<br>优点：提高了程序的执行效率<br>缺点：需要占用更多的CPU和系统资源<br>IO多路转接技术</p>
<h3 id="select-API介绍"><a href="#select-API介绍" class="headerlink" title="select API介绍"></a>select API介绍</h3><p>主旨思想</p>
<ol>
<li>首先要构造一个关于文件描述符的列表，将要监听的文件描述符添加到该列表中。</li>
<li>调用一个系统逐数，监听该列表中的文件玉达行，直到这些街达符中的一个或者多个进行1/0操作时，该函数才返回。</li>
<li>这个函数是阻塞</li>
<li>函数对文件描述符的检测的操作是由内核完成的</li>
<li>在返回时，它会告诉进程有多少（哪些） 描述符要进行I/0操作。</li>
</ol>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    @param writefds if == 1, 可以写入数据 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class="line"><span class="params">                  fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_CLR</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">FD_ISSET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_SET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>缺点：</p>
<ol>
<li>每次调用select，都需要把fd集合从用广态拷贝到内核态，这个开销在fd很多时会很大</li>
<li>同时每次调用select都需妥在内核遍历传递进来的所有fd，这个开销在fa很多时也很大</li>
<li>sclect支持的文件描述符数量太小了，默认是1024</li>
<li>fdls集合不能重用，每次都需要重置</li>
</ol>
<h3 id="select代码编写"><a href="#select代码编写" class="headerlink" title="select代码编写"></a>select代码编写</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listen</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line">    fd_set rdset, tmp;</span><br><span class="line">    FD_ZERO(&amp;rdset);</span><br><span class="line">    FD_SET(lfd, &amp;rdset);</span><br><span class="line">    <span class="type">int</span> maxfd = lfd;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        tmp = rdset;</span><br><span class="line">        <span class="comment">// cal select api</span></span><br><span class="line">        <span class="type">int</span> ret = select(maxfd+<span class="number">1</span>, &amp;tmp, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">// last NULL referst to block</span></span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>){</span><br><span class="line">            perror(<span class="string">"select"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (ret==<span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">if</span> (FD_ISSET(lfd, &amp;tmp)) {</span><br><span class="line">                <span class="keyword">struct</span> sockaddr_in clientAddr;</span><br><span class="line">                <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">                <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">                FD_SET(cfd, &amp;rdset);</span><br><span class="line">                maxfd = maxfd &gt; cfd ? maxfd : cfd;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=lfd+<span class="number">1</span>; i&lt;=maxfd; i++) {</span><br><span class="line">                <span class="keyword">if</span> (FD_ISSET(i, &amp;tmp)) {</span><br><span class="line">                    <span class="comment">// corespond cfd has data send in</span></span><br><span class="line">                    <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                    <span class="type">int</span> len = read(i, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                    <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"read"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    }<span class="keyword">else</span> <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"client closed.\n"</span>);</span><br><span class="line">                        close(i);</span><br><span class="line">                        FD_CLR(i, &amp;rdset);</span><br><span class="line">                    }<span class="keyword">else</span> {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"read: %s\n"</span>, buf);</span><br><span class="line">                        write(i, buf, <span class="built_in">strlen</span>(buf)+<span class="number">1</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="poll-API介绍及代码编写"><a href="#poll-API介绍及代码编写" class="headerlink" title="poll API介绍及代码编写"></a>poll API介绍及代码编写</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> {</span></span><br><span class="line">   <span class="type">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">   <span class="type">short</span> events;     <span class="comment">/* requested events */</span></span><br><span class="line">   <span class="type">short</span> revents;    <span class="comment">/* returned events */</span></span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">nfds_t</span> nfds, <span class="type">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// poll.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listen</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[1024];</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1024</span>; i++) {</span><br><span class="line">         fds[i].fd = <span class="number">-1</span>;</span><br><span class="line">         fds[i].events = POLLIN;</span><br><span class="line">    }</span><br><span class="line">    fds[<span class="number">0</span>].fd = lfd;</span><br><span class="line">    <span class="type">int</span> nfds = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="comment">// cal select api</span></span><br><span class="line">        <span class="type">int</span> ret = poll(fds, nfds+<span class="number">1</span>, <span class="number">-1</span>); <span class="comment">// last NULL referst to block</span></span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>){</span><br><span class="line">            perror(<span class="string">"poll"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (ret==<span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">if</span> (fds[<span class="number">0</span>].revents &amp; POLLIN ) {</span><br><span class="line">                <span class="keyword">struct</span> sockaddr_in clientAddr;</span><br><span class="line">                <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">                <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">1024</span>; i++) {</span><br><span class="line">                    <span class="keyword">if</span>(fds[i].fd ==<span class="number">-1</span> ){</span><br><span class="line">                        fds[i].fd = cfd;</span><br><span class="line">                        fds[i].events = POLLIN;</span><br><span class="line">                        nfds = nfds &gt; cfd ? nfds: cfd;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=nfds; i++) {</span><br><span class="line">                <span class="keyword">if</span> (fds[i].revents &amp; POLLIN == POLLIN) {</span><br><span class="line">                    <span class="comment">// corespond cfd has data send in</span></span><br><span class="line">                    <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                    <span class="type">int</span> len = read(fds[i].fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                    <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"read"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    }<span class="keyword">else</span> <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"client closed.\n"</span>);</span><br><span class="line">                        close(fds[i].fd);</span><br><span class="line">                        fds[i].fd = <span class="number">-1</span>;</span><br><span class="line">                    }<span class="keyword">else</span> {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"read: %s\n"</span>, buf);</span><br><span class="line">                        write(fds[i].fd,  buf, <span class="built_in">strlen</span>(buf)+<span class="number">1</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="epoll-API介绍"><a href="#epoll-API介绍" class="headerlink" title="epoll API介绍"></a>epoll API介绍</h3><p>Epoll</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span>{</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">rbr</span>;</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">rdlist</span>;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="epoll-代码编写"><a href="#epoll-代码编写" class="headerlink" title="epoll 代码编写"></a>epoll 代码编写</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">//create socket </span></span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listen</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> epfd = epoll_create(<span class="number">100</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epev</span>;</span></span><br><span class="line">    epev.events = EPOLLIN;</span><br><span class="line">    epev.data.fd = lfd;</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_ADD, lfd,  &amp;epev);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epevs</span>[1024];</span> </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> ret = epoll_wait(epfd, epevs, <span class="number">1024</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"epoll_wait"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ret = %d\n"</span>, ret);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;ret; i++) {</span><br><span class="line">            <span class="keyword">if</span> (epevs[i].data.fd == lfd) {</span><br><span class="line">                <span class="comment">// client connection</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">                <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">                <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">                epev.events = EPOLLIN;</span><br><span class="line">                epev.data.fd = cfd; </span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &amp;epev);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="type">int</span> cfd = epevs[i].data.fd;</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                <span class="type">int</span> len = read(cfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">                    perror(<span class="string">"read"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"client closed.\n"</span>);</span><br><span class="line">                    close(cfd);</span><br><span class="line">                    epoll_ctl(epfd, EPOLL_CTL_DEL, cfd, <span class="literal">NULL</span>);</span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"read: %s\n"</span>, buf);</span><br><span class="line">                    write(cfd, buf, <span class="built_in">strlen</span>(buf)+<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(lfd);</span><br><span class="line">    close(epfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="epoll的两种工作模式"><a href="#epoll的两种工作模式" class="headerlink" title="epoll的两种工作模式"></a>epoll的两种工作模式</h3><p>LT level-triggered 水平触发（缺省）<br>ET edge-triggered 边沿触发，或高速触发模式，只支持非阻塞 </p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll_et.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">//create socket </span></span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listen</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> epfd = epoll_create(<span class="number">100</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epev</span>;</span></span><br><span class="line">    epev.events = EPOLLIN;</span><br><span class="line">    epev.data.fd = lfd;</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_ADD, lfd,  &amp;epev);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epevs</span>[1024];</span> </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> ret = epoll_wait(epfd, epevs, <span class="number">1024</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"epoll_wait"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ret = %d\n"</span>, ret);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;ret; i++) {</span><br><span class="line">            <span class="keyword">if</span> (epevs[i].data.fd == lfd) {</span><br><span class="line">                <span class="comment">// client connection</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">                <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">                <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">                <span class="type">int</span> flag = fcntl(cfd, F_GETFL);</span><br><span class="line">                fcntl(cfd, F_SETFL, flag | O_NONBLOCK);</span><br><span class="line">                epev.events = EPOLLIN | EPOLLET;</span><br><span class="line">                epev.data.fd = cfd;</span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &amp;epev);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="type">int</span> cfd = epevs[i].data.fd;</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">5</span>] = {<span class="number">0</span>};</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len = read(cfd, buf, <span class="keyword">sizeof</span>(buf)))&gt;<span class="number">0</span>) {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"receive data: %s\n"</span>, buf);</span><br><span class="line">                        write(cfd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"client closed.\n"</span>);</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span>(len==<span class="number">-1</span>) {</span><br><span class="line">                    perror(<span class="string">"read"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(lfd);</span><br><span class="line">    close(epfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="type">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">"127.0.0.1"</span>, &amp;seraddr.sin_addr.s_addr);</span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    seraddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="type">int</span> ret = connect(fd, (<span class="keyword">struct</span> sockaddr *)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>){</span><br><span class="line">        perror(<span class="string">"connect"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> sendBuf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">        fgets(sendBuf, <span class="keyword">sizeof</span>(sendBuf), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        write(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收</span></span><br><span class="line">        <span class="type">int</span> len = read(fd, sendBuf, <span class="keyword">sizeof</span>(sendBuf));</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"read"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"read buf = %s\n"</span>, sendBuf);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"服务器已经断开连接...\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="UDP通信实现"><a href="#UDP通信实现" class="headerlink" title="UDP通信实现"></a>UDP通信实现</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">                      <span class="type">const</span> <span class="keyword">struct</span> sockaddr *dest_addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvfrom</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> sockaddr *src_addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// upd_client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">"127.0.0.1"</span>, &amp;saddr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> sendBuf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="built_in">sprintf</span>(sendBuf, <span class="string">"Hello I'm client, %d\n"</span>, num++);</span><br><span class="line">        sendto(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udp_server.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    bind(fd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">char</span> ipbuf[<span class="number">16</span>];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">        <span class="type">int</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">        <span class="type">int</span> num = recvfrom(fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;clientAddr, &amp;len);</span><br><span class="line">        <span class="keyword">if</span> (num==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"recvform"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        inet_ntop(AF_INET, &amp;clientAddr.sin_addr.s_addr, ipbuf, <span class="keyword">sizeof</span>(ipbuf));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"client IP:%s, port:%d\n"</span>, ipbuf, ntohs(clientAddr.sin_port)  );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"client say: %s\n"</span>, buf);</span><br><span class="line">        sendto(fd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, <span class="keyword">sizeof</span>(clientAddr));</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><h3 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h3><p>多播通信必须依赖于IP多播地址，在IPV4 中它的范国从 224.0.0.0到 239.255.255.255，并被划分肩部链接多播地址、预留多播地址和管理杈限多播地址三类</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multi_client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="type">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }   </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">in</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.客户端绑定本地的IP和端口</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = bind(fd, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add membership</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span> <span class="title">op</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">"239.0.0.10"</span>, &amp;op.imr_multiaddr.s_addr );</span><br><span class="line">    op.imr_interface.s_addr = INADDR_ANY;</span><br><span class="line">    setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &amp;op, <span class="keyword">sizeof</span>(op));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="type">int</span> num = recvfrom(fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"server say : %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multi_server.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="type">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.set multicast </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">imr_multiaddr</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">"239.0.0.10"</span>, &amp;imr_multiaddr.s_addr); </span><br><span class="line">    setsockopt(fd, IPPROTO_IP, IP_MULTICAST_IF, &amp;imr_multiaddr, <span class="keyword">sizeof</span>(imr_multiaddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个广播的地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    cliaddr.sin_family = AF_INET;</span><br><span class="line">    cliaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">"239.0.0.10"</span>, &amp;cliaddr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Communication</span></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> sendBuf[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(sendBuf, <span class="string">"hello, client....%d\n"</span>, num++);</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        sendto(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;cliaddr, <span class="keyword">sizeof</span>(cliaddr));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Multicasting data: %s\n"</span>, sendBuf);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="本地套接字通信"><a href="#本地套接字通信" class="headerlink" title="本地套接字通信"></a>本地套接字通信</h3><p>本地的进程间通信<br>服务器端：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ipc_server.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> {</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_LOCAL, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (lfd == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sun_family = AF_LOCAL;</span><br><span class="line">    unlink(<span class="string">"server.sock"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(addr.sun_path, <span class="string">"server.sock"</span>);</span><br><span class="line">    <span class="type">int</span> ret = bind(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    ret = listen(lfd, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">    <span class="type">int</span> cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (cfd==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"accept"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"client socket filename: %s\n"</span>, clientAddr.sun_path );</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>]  = {<span class="number">0</span>};</span><br><span class="line">        <span class="type">int</span> len =  recv(cfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"recv"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(len==<span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"client closed..."</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cliend say: %s\n"</span>, buf);</span><br><span class="line">            send(cfd, buf, len, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    close(cfd);</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ipc_client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> {</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="type">int</span> cfd = socket(AF_LOCAL, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cfd == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">    clientAddr.sun_family = AF_LOCAL;</span><br><span class="line">    unlink(<span class="string">"client.sock"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(clientAddr.sun_path, <span class="string">"client.sock"</span>);</span><br><span class="line">    <span class="type">int</span> ret = bind(cfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientAddr, <span class="keyword">sizeof</span>(clientAddr));</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">serverAddr</span>;</span></span><br><span class="line">    <span class="built_in">strcpy</span>(serverAddr.sun_path, <span class="string">"server.sock"</span>);</span><br><span class="line">    ret = connect(cfd, (<span class="keyword">struct</span> sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// communication</span></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>]  = {<span class="number">0</span>};</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">"hello, I'm client num:%d"</span>, num++);</span><br><span class="line">        send(cfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len =  recv(cfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">-1</span>) {</span><br><span class="line">            perror(<span class="string">"recv"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(len==<span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"connection closed..."</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"server say: %s\n"</span>, buf);</span><br><span class="line">        }</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    close(cfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ WebServer 5 项目实战与总结</title>
    <url>/2022/12/17/WebServerNote/webserver-note5/</url>
    <content><![CDATA[<h3 id="阻塞和非阻塞、同步和异步"><a href="#阻塞和非阻塞、同步和异步" class="headerlink" title="阻塞和非阻塞、同步和异步"></a>阻塞和非阻塞、同步和异步</h3><p>网络IO<br>数据就绪</p>
<ul>
<li>阻塞</li>
<li>非阻塞：不会改变线程的状态，通过返回值判断<br>数据读写，应用程序</li>
<li>同步</li>
<li>异步：通知方式，更为麻烦<br>在处理I/O的时候，阻塞和非阻塞都是同步I/O，只有使用了特殊的AP1 才是异步I/O。<br>Linux：AIO<br>Windows：IOCP</li>
</ul>
<h3 id="Unix、Linux上的五种IO模型"><a href="#Unix、Linux上的五种IO模型" class="headerlink" title="Unix、Linux上的五种IO模型"></a>Unix、Linux上的五种IO模型</h3><ol>
<li>Blocking</li>
<li>Nonblocking<br>EAGAIN</li>
<li>IO multiplexing<br>Select, poll, epoll</li>
<li>Signal-driven</li>
<li>Asynchronous</li>
</ol>
<h3 id="Web服务器简介及HTTP协议"><a href="#Web服务器简介及HTTP协议" class="headerlink" title="Web服务器简介及HTTP协议"></a>Web服务器简介及HTTP协议</h3><p>HTTP 请求方法</p>
<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
</tr>
<tr>
<td>HEAD</td>
</tr>
<tr>
<td>POST</td>
</tr>
<tr>
<td>PUT</td>
</tr>
<tr>
<td>DELETE</td>
</tr>
<tr>
<td>TRACE</td>
</tr>
<tr>
<td>OPTIONS</td>
</tr>
<tr>
<td>CONNECT</td>
</tr>
</tbody></table>
<h3 id="服务器编程基本框架和两种高效的事件处理模式"><a href="#服务器编程基本框架和两种高效的事件处理模式" class="headerlink" title="服务器编程基本框架和两种高效的事件处理模式"></a>服务器编程基本框架和两种高效的事件处理模式</h3><p>逻辑处理<br>模块：<br>I/O处理单元<br>逻辑单元：业务线程或进程（并发处理）<br>网络存储单元：数据库、文件或缓存<br>请求队列：各单元之间的通信方式<br>三类事件<br>I/O事件，信号及定时事件<br>两类事件处理模式：<br>Reactor模式：<br>主线程：监听文件描述符上是否有事件发生。工作线程<br>同步I/O<br>Proactor方式：<br>异步I/O模型：<br>将所有I/O操作都交给主线程和内核来处理，工作线程仅负责业务逻辑<br>采用同步I/O模拟Proactor模式</p>
<h3 id="线程同步机制类封装及线程池实现"><a href="#线程同步机制类封装及线程池实现" class="headerlink" title="线程同步机制类封装及线程池实现"></a>线程同步机制类封装及线程池实现</h3><p>线程池是由服务器预先创建的一组子线程，线程池中的线程数应该和 CPU 数星差不多。线程池中的所有子线程都运行着相同的代码。当有新的任务到来时，主线程将通过某种方式选择线程池中的某一个子线程来为之服务。相比与动态的创建子线程，选择一个已经存在的子线程的代价显然要小得多。至于主线程选择哪个子线程来为新任务服务，则有多种方式：</p>
<ul>
<li>主线程使用某种算法来主动选择子线程。最简单、最常用的算法是随机算法和Round Robin(轮流选取）算法，但更优秀、更智能的算法将使任务在各个工作线程中更均匀地分配，从而減轻服务器的整体压力。</li>
<li>主线程和所有子线程通过一个共享的工作队列来同步，子线程都睡眠在该工作队列上。当有新的任务到来时，主线程将任务添加到工作队列中。这将唤醒正在等待任务的子结程，不过只有一个子线程将获得新任务的接管权，已可以从工作队列中取出任务并执行之，而其他子线程将继续睡眠在工作队列上。<br>对于CPU密集型的任务，线程数最最好也设置为4（或者+1防止其他因素造成的线程阻塞），对于IO密集型的任务，一般要多于CPU的核数，因为线程间竞争的不是CPU的计算资源而是IO，IO的处理一般较慢，多于cores数的线程将为CPU争取更多的任务，不至在线程处理IO的过程造成CPU空闲导致资源浪费。</li>
<li>空间换时间，浪费服务器的硬件资源，换取运行效率。</li>
<li>池是一组资源的集合，这组资源在服务器启动之初就被完全创建好并初始化，这称为静态资源。</li>
<li>当服务器进入正式运行阶段，开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配。</li>
<li>当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。</li>
</ul>
<h3 id="定时检测非活跃连接、服务器压力测试"><a href="#定时检测非活跃连接、服务器压力测试" class="headerlink" title="定时检测非活跃连接、服务器压力测试"></a>定时检测非活跃连接、服务器压力测试</h3>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift Package 下载慢解决方法</title>
    <url>/2023/01/31/swiftPackage/</url>
    <content><![CDATA[<h2 id="Date-Sun-Feb-26-17-11-43-CST-2023"><a href="#Date-Sun-Feb-26-17-11-43-CST-2023" class="headerlink" title="Date: Sun Feb 26 17:11:43 CST 2023"></a>Date: Sun Feb 26 17:11:43 CST 2023</h2><hr>
<p>I first thought would be a problem with Xcode itself, but I’m not not much sure about it. I then have a new Proxy provider, and it fix the problem, it would take me a few seconds to have all the packages updated after launch Xcode on the project. Still, I’m not sure what happened, after I shift back to my old Proxy provider, it still works, but this time I’m at school, not home. One thing I can think out lead to this change is that I load this project with <em>Clone an existing project</em> at Xcode open panel and configured my personal access token. Besides, I didn’t clone it from command line but cloned it using Xcode. And I can’t push it in Terminal, I can push it with Xcode only, but fetch and pull is ok.</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></div>
<p>it </p>
<p>尝试<a class="link" href="https://developer.apple.com/videos/play/wwdc2022/110360/">Swift Server<i class="fa-solid fa-up-right-from-square"></i></a>，需要Vapor库，在Xcode中新建Package项目后，修改Package.swift中的dependency后，Xcode开始加载库，我开了代理，但加载库的速度仍然极慢。</p>
<h2 id="手动加载库"><a href="#手动加载库" class="headerlink" title="手动加载库"></a>手动加载库</h2><p>在Termial中cd到Package项目根目录下，<a class="link" href="https://www.jianshu.com/p/c99373ad37f7">设置当前终端的HTTP代理<i class="fa-solid fa-up-right-from-square"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure></div>
<p><code>7890</code>为我开的代理的端口号，端口号因自己的代理而异。<br>然后在项目的根目录下运行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">swift build</span><br></pre></td></tr></table></figure></div>
<p>效果如下</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Fetching https://github.com/vapor/vapor.git from cache</span><br><span class="line">Fetched https://github.com/vapor/vapor.git (3.05s)</span><br><span class="line">Computing version for https://github.com/vapor/vapor.git</span><br><span class="line">Computed https://github.com/vapor/vapor.git at 4.69.2 (0.62s)</span><br><span class="line">Fetching https://github.com/vapor/websocket-kit.git from cache</span><br><span class="line">Fetching https://github.com/vapor/multipart-kit.git from cache</span><br><span class="line">Fetching https://github.com/apple/swift-algorithms.git from cache</span><br><span class="line">Fetched https://github.com/vapor/websocket-kit.git (5.62s)</span><br><span class="line">Fetched https://github.com/apple/swift-algorithms.git (5.62s)</span><br><span class="line">Fetching https://github.com/apple/swift-log.git from cache</span><br><span class="line">Fetching https://github.com/apple/swift-metrics.git from cache</span><br><span class="line">Fetched https://github.com/vapor/multipart-kit.git (5.63s)</span><br><span class="line">Fetching https://github.com/apple/swift-nio-extras.git from cache</span><br><span class="line">Fetched https://github.com/apple/swift-nio-extras.git (10.99s)</span><br><span class="line">Fetching https://github.com/apple/swift-nio-http2.git from cache</span><br><span class="line">Fetched https://github.com/apple/swift-metrics.git (11.61s)</span><br><span class="line">Fetching https://github.com/apple/swift-nio-ssl.git from cache</span><br><span class="line">Fetched https://github.com/apple/swift-log.git (11.61s)</span><br><span class="line">Fetching https://github.com/apple/swift-nio.git from cache</span><br><span class="line">Fetched https://github.com/apple/swift-nio-http2.git (43.83s)</span><br><span class="line">Fetching https://github.com/swift-server/swift-backtrace.git</span><br><span class="line">Fetched https://github.com/swift-server/swift-backtrace.git (8.10s)</span><br><span class="line">Fetching https://github.com/vapor/routing-kit.git from cache</span><br><span class="line">Fetched https://github.com/vapor/routing-kit.git (2.91s)</span><br><span class="line">Fetching https://github.com/apple/swift-crypto.git from cache</span><br><span class="line">Fetched https://github.com/apple/swift-nio-ssl.git (85.27s)</span><br><span class="line">Fetching https://github.com/vapor/console-kit.git from cache</span><br><span class="line">Fetched https://github.com/vapor/console-kit.git (1.93s)</span><br><span class="line">Fetching https://github.com/vapor/async-kit.git from cache</span><br><span class="line">Fetched https://github.com/vapor/async-kit.git (3.11s)</span><br><span class="line">Fetching https://github.com/swift-server/async-http-client.git from cache</span><br><span class="line">Fetched https://github.com/swift-server/async-http-client.git (2.11s)</span><br><span class="line">warning: skipping cache due to an error: Couldn’t fetch updates from remote repositories:</span><br><span class="line">    fatal: unable to access 'https://github.com/apple/swift-crypto.git/': LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 </span><br><span class="line">Fetched https://github.com/apple/swift-crypto.git (159.04s)</span><br><span class="line">Fetched https://github.com/apple/swift-nio.git (470.00s)</span><br><span class="line">Computing version for https://github.com/apple/swift-algorithms.git</span><br><span class="line">Computed https://github.com/apple/swift-algorithms.git at 1.0.0 (1.52s)</span><br><span class="line">Fetching https://github.com/apple/swift-numerics</span><br><span class="line">Fetched https://github.com/apple/swift-numerics (14.88s)</span><br><span class="line">Computing version for https://github.com/vapor/routing-kit.git</span><br><span class="line">Computed https://github.com/vapor/routing-kit.git at 4.6.0 (0.69s)</span><br><span class="line">Computing version for https://github.com/vapor/async-kit.git</span><br><span class="line">Computed https://github.com/vapor/async-kit.git at 1.16.0 (0.60s)</span><br><span class="line">Computing version for https://github.com/apple/swift-nio.git</span><br><span class="line">Computed https://github.com/apple/swift-nio.git at 2.48.0 (0.65s)</span><br><span class="line">Fetching https://github.com/apple/swift-atomics.git</span><br><span class="line">Fetching https://github.com/apple/swift-collections.git</span><br><span class="line">Fetched https://github.com/apple/swift-atomics.git (144.71s)</span><br><span class="line">Fetched https://github.com/apple/swift-collections.git (144.71s)</span><br><span class="line">Computing version for https://github.com/apple/swift-atomics.git</span><br><span class="line">Computed https://github.com/apple/swift-atomics.git at 1.0.3 (1.06s)</span><br><span class="line">Computing version for https://github.com/apple/swift-numerics</span><br><span class="line">Computed https://github.com/apple/swift-numerics at 1.0.2 (0.62s)</span><br><span class="line">Computing version for https://github.com/apple/swift-collections.git</span><br><span class="line">Computed https://github.com/apple/swift-collections.git at 1.0.4 (0.62s)</span><br><span class="line">Computing version for https://github.com/vapor/multipart-kit.git</span><br><span class="line">Computed https://github.com/vapor/multipart-kit.git at 4.5.2 (1.22s)</span><br><span class="line">Computing version for https://github.com/apple/swift-log.git</span><br><span class="line">Computed https://github.com/apple/swift-log.git at 1.5.2 (0.61s)</span><br><span class="line">Computing version for https://github.com/apple/swift-nio-http2.git</span><br><span class="line">Computed https://github.com/apple/swift-nio-http2.git at 1.23.1 (0.64s)</span><br><span class="line">Computing version for https://github.com/apple/swift-metrics.git</span><br><span class="line">Computed https://github.com/apple/swift-metrics.git at 2.3.3 (1.07s)</span><br><span class="line">Computing version for https://github.com/swift-server/swift-backtrace.git</span><br><span class="line">Computed https://github.com/swift-server/swift-backtrace.git at 1.3.3 (0.61s)</span><br><span class="line">Computing version for https://github.com/swift-server/async-http-client.git</span><br><span class="line">Computed https://github.com/swift-server/async-http-client.git at 1.13.2 (0.62s)</span><br><span class="line">Fetching https://github.com/apple/swift-nio-transport-services.git</span><br><span class="line">Fetched https://github.com/apple/swift-nio-transport-services.git (5.95s)</span><br><span class="line">Computing version for https://github.com/apple/swift-nio-extras.git</span><br><span class="line">Computed https://github.com/apple/swift-nio-extras.git at 1.15.0 (0.60s)</span><br><span class="line">Computing version for https://github.com/apple/swift-nio-ssl.git</span><br><span class="line">Computed https://github.com/apple/swift-nio-ssl.git at 2.23.0 (0.66s)</span><br><span class="line">Computing version for https://github.com/apple/swift-nio-transport-services.git</span><br><span class="line">Computed https://github.com/apple/swift-nio-transport-services.git at 1.15.0 (0.60s)</span><br><span class="line">Computing version for https://github.com/vapor/websocket-kit.git</span><br><span class="line">Computed https://github.com/vapor/websocket-kit.git at 2.6.1 (0.62s)</span><br><span class="line">Computing version for https://github.com/vapor/console-kit.git</span><br><span class="line">Computed https://github.com/vapor/console-kit.git at 4.6.0 (0.62s)</span><br><span class="line">Computing version for https://github.com/apple/swift-crypto.git</span><br><span class="line">Computed https://github.com/apple/swift-crypto.git at 2.2.4 (0.62s)</span><br><span class="line">Creating working copy for https://github.com/vapor/multipart-kit.git</span><br><span class="line">Working copy of https://github.com/vapor/multipart-kit.git resolved at 4.5.2</span><br><span class="line">Creating working copy for https://github.com/apple/swift-nio.git</span><br><span class="line">Working copy of https://github.com/apple/swift-nio.git resolved at 2.48.0</span><br><span class="line">Creating working copy for https://github.com/swift-server/async-http-client.git</span><br><span class="line">Working copy of https://github.com/swift-server/async-http-client.git resolved at 1.13.2</span><br><span class="line">Creating working copy for https://github.com/apple/swift-log.git</span><br><span class="line">Working copy of https://github.com/apple/swift-log.git resolved at 1.5.2</span><br><span class="line">Creating working copy for https://github.com/apple/swift-crypto.git</span><br><span class="line">Working copy of https://github.com/apple/swift-crypto.git resolved at 2.2.4</span><br><span class="line">Creating working copy for https://github.com/apple/swift-atomics.git</span><br><span class="line">Working copy of https://github.com/apple/swift-atomics.git resolved at 1.0.3</span><br><span class="line">Creating working copy for https://github.com/vapor/console-kit.git</span><br><span class="line">Working copy of https://github.com/vapor/console-kit.git resolved at 4.6.0</span><br><span class="line">Creating working copy for https://github.com/apple/swift-algorithms.git</span><br><span class="line">Working copy of https://github.com/apple/swift-algorithms.git resolved at 1.0.0</span><br><span class="line">Creating working copy for https://github.com/vapor/routing-kit.git</span><br><span class="line">Working copy of https://github.com/vapor/routing-kit.git resolved at 4.6.0</span><br><span class="line">Creating working copy for https://github.com/vapor/async-kit.git</span><br><span class="line">Working copy of https://github.com/vapor/async-kit.git resolved at 1.16.0</span><br><span class="line">Creating working copy for https://github.com/swift-server/swift-backtrace.git</span><br><span class="line">Working copy of https://github.com/swift-server/swift-backtrace.git resolved at 1.3.3</span><br><span class="line">Creating working copy for https://github.com/apple/swift-collections.git</span><br><span class="line">Working copy of https://github.com/apple/swift-collections.git resolved at 1.0.4</span><br><span class="line">Creating working copy for https://github.com/apple/swift-metrics.git</span><br><span class="line">Working copy of https://github.com/apple/swift-metrics.git resolved at 2.3.3</span><br><span class="line">Creating working copy for https://github.com/apple/swift-nio-extras.git</span><br><span class="line">Working copy of https://github.com/apple/swift-nio-extras.git resolved at 1.15.0</span><br><span class="line">Creating working copy for https://github.com/apple/swift-nio-http2.git</span><br><span class="line">Working copy of https://github.com/apple/swift-nio-http2.git resolved at 1.23.1</span><br><span class="line">Creating working copy for https://github.com/apple/swift-nio-ssl.git</span><br><span class="line">Working copy of https://github.com/apple/swift-nio-ssl.git resolved at 2.23.0</span><br><span class="line">Creating working copy for https://github.com/apple/swift-numerics</span><br><span class="line">Working copy of https://github.com/apple/swift-numerics resolved at 1.0.2</span><br><span class="line">Creating working copy for https://github.com/vapor/vapor.git</span><br><span class="line">Working copy of https://github.com/vapor/vapor.git resolved at 4.69.2</span><br><span class="line">Creating working copy for https://github.com/vapor/websocket-kit.git</span><br><span class="line">Working copy of https://github.com/vapor/websocket-kit.git resolved at 2.6.1</span><br><span class="line">Creating working copy for https://github.com/apple/swift-nio-transport-services.git</span><br><span class="line">Working copy of https://github.com/apple/swift-nio-transport-services.git resolved at 1.15.0</span><br><span class="line">Building for debugging...</span><br><span class="line">[1354/1354] Linking MyServer</span><br><span class="line">Build complete! (726.57s)</span><br></pre></td></tr></table></figure></div>
<p>可以看到总时长是<code>726.57s</code>，但总算是下好了。</p>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ WebServer 2 Linux 多进程开发</title>
    <url>/2022/12/17/WebServerNote/webserver-note2/</url>
    <content><![CDATA[<h3 id="进程概述"><a href="#进程概述" class="headerlink" title="进程概述"></a>进程概述</h3><p>进程是正在运行的程序的实例。是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。<br>程序不占CPU、Memory，进程占用CPU和Memory<br>可以用一个程序来创建多个进程，进程是由内核定义的抽象实体，并为该实体分配用以执行程序的各项系统资源。从内核的角度看，进程由用户内存空问和一系列内核数据结构组成，其中用户内存空间包含了程序代码及代码所使用的变量，而内核数据结构则用于维护进程状态信息。记录在内核数据结构中的信息包括许多与进程相关的标识号(IDs）、虚拟内存表、打开文件的描述符表、信号传递及处理的有关信息、进程资源使用及限制、当前工作目录和大量的其他信息。<br>内核数据</p>
<blockquote>
<ul>
<li>标识号</li>
</ul>
</blockquote>
<ul>
<li>虚拟内存表</li>
<li>文件描述符表</li>
<li>信号传递及处理的有关信息</li>
<li>进程资源使用及限制</li>
<li>当前工作目录和大量的其他信息。</li>
</ul>
<p>单道程序<br>多道程序设计<br>Timeslice<br>Parallel: multiprocessors<br>Concurrency: single processor<br>PCB: Processing Control Block struct task_struct  </p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>{</span></span><br><span class="line">    <span class="type">int</span> <span class="type">pid_t</span>;</span><br><span class="line">    <span class="comment">//进程状态</span></span><br><span class="line">    <span class="comment">// 保存和恢复的一些CPU寄存器</span></span><br><span class="line">    <span class="comment">//虚拟地址空间</span></span><br><span class="line">    <span class="comment">//控制终端的信息</span></span><br><span class="line">    <span class="comment">//current working directory</span></span><br><span class="line">    <span class="comment">// umask</span></span><br><span class="line">    <span class="comment">// file describer </span></span><br><span class="line">    <span class="comment">// signal related infor</span></span><br><span class="line">    <span class="comment">// uid gid</span></span><br><span class="line">    <span class="comment">// session and process group</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a </span><br><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure></div>

<h3 id="进程状态转换"><a href="#进程状态转换" class="headerlink" title="进程状态转换"></a>进程状态转换</h3><p>三态模型：就绪、运行、阻塞<br>五态模型：新建、就绪、运行、阻塞、终止</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux</span><br><span class="line">$ ps j</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th>arg</th>
<th>usage</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>all</td>
</tr>
<tr>
<td>u</td>
<td>详细信息</td>
</tr>
<tr>
<td>x</td>
<td>没有控制终端的进程</td>
</tr>
<tr>
<td>j</td>
<td>作业进程</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ top</span><br><span class="line">$ <span class="built_in">kill</span> //kill process</span><br><span class="line">$ ./a.out &amp; <span class="comment">#后代运行</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">getpid</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">getppid</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">// father pid </span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">getpgid</span><span class="params">(<span class="type">pid_t</span> pid)</span>; <span class="comment">//</span></span><br></pre></td></tr></table></figure></div>

<h3 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid&gt;<span class="number">0</span>){</span><br><span class="line">        <span class="comment">// father process</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pid:%d, ppid:%d\n)"</span>, pid, getppid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I'm parent process, pid=%d\n"</span>, getpid());</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span> (pid==<span class="number">0</span>){</span><br><span class="line">        <span class="comment">// child process</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I'm child process, pid=%d, ppid=%d\n"</span>, getpid(), getppid());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i:%d, pid:%d, ppid:%d\n"</span>, i, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }       </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h3 id="父子进程虚拟地址空间情况"><a href="#父子进程虚拟地址空间情况" class="headerlink" title="父子进程虚拟地址空间情况"></a>父子进程虚拟地址空间情况</h3><p>Copy on write: 共享地址空间，只在需要时复制。父子进程共享文件（fd)<br>读时共享，写时复制。</p>
<h3 id="父子进程关系及GDB多进程调试"><a href="#父子进程关系及GDB多进程调试" class="headerlink" title="父子进程关系及GDB多进程调试"></a>父子进程关系及GDB多进程调试</h3><p>父子进程的共同点：</p>
<ul>
<li>开始时共享</li>
<li>读时共享，写时拷贝<br>GDB多进程调试<br>gdb默认跟踪父进程<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> follow-fork mode [parent|child]</span><br><span class="line"><span class="built_in">set</span> detach-on-fork [on|off] 是否脱离gdb调试</span><br><span class="line">info inferiors</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="exec函数族"><a href="#exec函数族" class="headerlink" title="exec函数族"></a>exec函数族</h3><p>在调用进程内部执行一个可执行文件</p>
<blockquote>
<p>exec(“a.out”)<br>execl<br>execlp<br>execle<br>execv<br>execvp<br>execvpe<br>execve<br>l: list 参数地址列表<br>v(vector) 存有各参数地址的指针数组的地址<br>p(path) 按 PATH 环境变量指定的目录搜索可执行文件<br>e(environment) 存有环境变量字符串地址的指针数组的地址</p>
</blockquote>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// man 3 exec</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg, ... )</span>; <span class="comment">// /bin/ps</span></span><br><span class="line"><span class="comment">// 参数最后以NULL结尾</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">const</span> <span class="type">char</span> *arg, ...)</span>; <span class="comment">//会自己在path(env 查看）中查找， 可写ps</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execle</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">char</span> *<span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execvpe</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[],</span></span><br><span class="line"><span class="params">                       <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execl.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (fork()&gt;<span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent process, pid:%d\n"</span>, getpid());</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        execl(<span class="string">"hello"</span>, <span class="string">"hello"</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I'm child process, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">    }   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i:%d, pid:%d\n"</span>, i, getpid());</span><br><span class="line">    }   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>Output</p>
<blockquote>
<p>parent process, pid:26979<br>i:0, pid:26979<br>i:1, pid:26979<br>i:2, pid:26979<br>Hello, world!</p>
</blockquote>
<p>In child process, nothing will happen after execl(子进程内存印象被替换，无返回）</p>
<h3 id="进程退出、孤儿进程、僵尸进程"><a href="#进程退出、孤儿进程、僵尸进程" class="headerlink" title="进程退出、孤儿进程、僵尸进程"></a>进程退出、孤儿进程、僵尸进程</h3><p>进程退出</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> _exit(<span class="type">int</span> status);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span>;</span><br></pre></td></tr></table></figure></div>
<p>父进程回收子进程资源</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>hello<br>exit()会有IO处理，_exit()无，所以不会刷新缓冲区，不会printf(“world”);</p>
</blockquote>
<p>孤儿进程: </p>
<blockquote>
<p>父进程先死了，把父进程设置为init，为了回收资源<br>孤儿进程不会有什么危害</p>
</blockquote>
<p>僵尸进程 zombie</p>
<blockquote>
<p>进程终止时，父进程尚未回收<br>不能被kill -9杀死，无法释放进程号</p>
</blockquote>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (fork()){</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"I'm parent process, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        }   </span><br><span class="line">    }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"I'm child process, pid=%d, ppid=%d\n"</span>, getpid(), getppid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure></div>
<p>可以看见状态为 Z的进程</p>
<h3 id="wait-函数"><a href="#wait-函数" class="headerlink" title="wait 函数"></a>wait 函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// man 2 wait</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *wstatus)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *wstatus, <span class="type">int</span> options)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    }   </span><br><span class="line">    <span class="keyword">if</span> (pid&gt;<span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"I'm parent, pid:%d\n"</span>, getpid());</span><br><span class="line">            <span class="type">int</span> st;</span><br><span class="line">            <span class="type">int</span> ret = wait(&amp;st);</span><br><span class="line">            <span class="keyword">if</span> (ret==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"exited with %d\n"</span>, WTERMSIG(st));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"child die, pid:%d\n"</span>, ret);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span> (pid==<span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"I'm child process, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        }   </span><br><span class="line">    }   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}   </span><br></pre></td></tr></table></figure></div>

<h3 id="waitpid-函数"><a href="#waitpid-函数" class="headerlink" title="waitpid 函数"></a>waitpid 函数</h3><p>可以设置是否阻塞</p>
<blockquote>
<p>The value of pid can be:<br>       &lt; -1   meaning  wait  for  any  child process whose process group ID is<br>              equal to the absolute value of pid.<br>       -1     meaning wait for any child process.<br>       0      meaning wait for any child process whose  process  group  ID  is<br>              equal to that of the calling process.<br>0    meaning  wait  for  the  child  whose process ID is equal to the<br>              value of pid.<br>The value of options is an OR of zero or more  of  the  following  con‐<br>       stants:<br>       WNOHANG     return immediately if no child has exited.<br>       WUNTRACED   also  return  if  a  child  has stopped (but not traced via<br>                   ptrace(2)).  Status for traced children which have  stopped<br>                   is provided even if this option is not specified.<br>       WCONTINUED (since Linux 2.6.10)<br>                   also return if a stopped child has been resumed by delivery<br>                   of SIGCONT.<br><strong>waitpid()</strong>: on success, returns the process ID of the child whose  state<br>       has changed; if WNOHANG was specified and one or more child(ren) speci‐<br>       fied by pid exist, but have not yet changed state, then 0 is  returned.<br>       On error, -1 is returned.</p>
</blockquote>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">                ret = fork();</span><br><span class="line">                <span class="keyword">if</span> (!pid) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (pid) {</span><br><span class="line">                 <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">                     sleep(<span class="number">1</span>);</span><br><span class="line">                     <span class="built_in">printf</span>(<span class="string">"I'm parent process, pid:%d\n"</span>, getpid());</span><br><span class="line">                     <span class="type">int</span> st;</span><br><span class="line">                     <span class="type">int</span> res = waitpid(<span class="number">-1</span>, &amp;st, WNOHANG);</span><br><span class="line">                     <span class="keyword">if</span> (res==<span class="number">-1</span>) {</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                     }<span class="keyword">else</span> <span class="keyword">if</span> (res==<span class="number">0</span>) {</span><br><span class="line">                             <span class="keyword">continue</span>;</span><br><span class="line">                     }<span class="keyword">else</span>{</span><br><span class="line">                             <span class="built_in">printf</span>(<span class="string">"child process pid:%d die\n"</span>, res);</span><br><span class="line">                     }</span><br><span class="line">                 }</span><br><span class="line">         }<span class="keyword">else</span>{</span><br><span class="line">                 <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">                         sleep(<span class="number">1</span>);</span><br><span class="line">                         </span><br><span class="line">                         <span class="built_in">printf</span>(<span class="string">"I'm child process, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">                 }</span><br><span class="line">         }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="进程间通信简介"><a href="#进程间通信简介" class="headerlink" title="进程间通信简介"></a>进程间通信简介</h3><p>Inter Process Communication<br>目的：数据传输、通知事件、资源共享、进程控制<br>同一主机进程间的通信<br>UNIX：匿名管道，有名管道，信号<br>System V/POSIX：消息队列、共享内存、信号量<br>不同主机（网络）进程间通信：Socket</p>
<h3 id="匿名管道概述"><a href="#匿名管道概述" class="headerlink" title="匿名管道概述"></a>匿名管道概述</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> | <span class="built_in">wc</span> -l $ | 管道符</span><br></pre></td></tr></table></figure></div>

<ul>
<li>管道其实是一个在内核内存中维护的缓冲器，这个缓冲器的存储能力是有限的，不同的操作系统大小不一定相同。</li>
<li>管道拥有文件的特质：读操作、写操作，匿名管道没有文件实体，有名管道有文件实体，但不存储数据。可以按照操作文件的方式对管道进行操作。</li>
<li>一个管道是一个字节流，使用管道时不存在消息或者消息边界的概念，从管道读取数据的进程可以读取任意大小的数据块．而不管写入进程写入管道的数据块的大小是多少。</li>
<li>通过管道传递的数据是顺序的，从管道中读取出来的字节的顺序和它们被写入管道的顺序是完全一样的。</li>
<li>单向，半双工</li>
<li>数据一次性操作，读完即扔。不能使用lseek来随机的访问数据</li>
<li>只能在具有公共祖先的进程中使用，父子｜兄弟 （共用文件描述符表）</li>
<li>数据结构：循环队列<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">/*create pipe */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipefd[<span class="number">2</span>])</span>;</span><br><span class="line"><span class="comment">/* show pipe buffer limit */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">fpathconf</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> name)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pipe size </span></span><br><span class="line"><span class="built_in">ulimit</span> -a</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="父子进程通过匿名管道通信"><a href="#父子进程通过匿名管道通信" class="headerlink" title="父子进程通过匿名管道通信"></a>父子进程通过匿名管道通信</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipefd[<span class="number">2</span>])</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">pipe()  creates  a pipe, a unidirectional data channel that can be used</span></span><br><span class="line"><span class="comment">       for interprocess communication.  The array pipefd is used to return two</span></span><br><span class="line"><span class="comment">       file  descriptors  referring to the ends of the pipe.  pipefd[0] refers</span></span><br><span class="line"><span class="comment">       to the read end of the pipe.  pipefd[1] refers to the write end of  the</span></span><br><span class="line"><span class="comment">       pipe.   Data  written  to  the write end of the pipe is buffered by the</span></span><br><span class="line"><span class="comment">       kernel until it is read from the read end of  the  pipe.</span></span><br><span class="line"><span class="comment">@param[out] pipefd[0] read end</span></span><br><span class="line"><span class="comment">@param[out] pipefd[1] write end</span></span><br><span class="line"><span class="comment">@return 0 success, -1 failed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipefd)==<span class="number">-1</span>) perror(<span class="string">"pipe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"fork"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (pid==<span class="number">0</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"I'm child process, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">                <span class="type">char</span> *str = <span class="string">"hello, I'm child"</span>;</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                        write(pipefd[<span class="number">1</span>], str, <span class="built_in">strlen</span>(str));</span><br><span class="line">                        sleep(<span class="number">1</span>);</span><br><span class="line">                        read(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"child received %s\n"</span>, buf);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"I'm parent process, pid:%d\n"</span>, getpid());</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                <span class="type">char</span> *str = <span class="string">"I'm parent"</span>;</span><br><span class="line">                <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                        sleep(<span class="number">1</span>);</span><br><span class="line">                        <span class="type">int</span> len = read(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"parent received %s, pid:%d\n"</span>, buf, getpid());</span><br><span class="line">                        write(pipefd[<span class="number">1</span>], str, <span class="built_in">strlen</span>(str));</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>管道默认阻塞<br>开发中不要自己写，防止自己读到自己写的程序</p>
<h3 id="匿名管道通信案例"><a href="#匿名管道通信案例" class="headerlink" title="匿名管道通信案例"></a>匿名管道通信案例</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep root</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* parent child pipe */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">        pipe(pipefd);</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid&gt;<span class="number">0</span>) {</span><br><span class="line">                <span class="comment">//TODO parent process</span></span><br><span class="line">                close(pipefd[<span class="number">1</span>]);</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span> ( (len=read(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf)<span class="number">-1</span>)) &gt; <span class="number">0</span>) {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line">                        bzero(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                }</span><br><span class="line">                wait();</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>){</span><br><span class="line">                <span class="comment">//TODO child process</span></span><br><span class="line">                dup2(pipefd[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">                close(pipefd[<span class="number">0</span>]);</span><br><span class="line">                execlp(<span class="string">"ps"</span>, <span class="string">"ps"</span>, <span class="string">"aux"</span>, <span class="literal">NULL</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">                perror(<span class="string">"fork"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="管道的读写特点和管道设置为非阻塞"><a href="#管道的读写特点和管道设置为非阻塞" class="headerlink" title="管道的读写特点和管道设置为非阻塞"></a>管道的读写特点和管道设置为非阻塞</h3><ol>
<li>pipefd[1] 引用计数为0，read完之后读，return 0；</li>
<li>pipefd[1]引用计数不位0，数据被读完，read 阻塞；</li>
<li>读端引用计数为0，写数据，SIGPIPE信号，异常终止。</li>
<li>读端引用计数不位0，写满数据，write会阻塞<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* noblock.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipefd)==<span class="number">-1</span>) perror(<span class="string">"pipe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"fork"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (pid==<span class="number">0</span>) {</span><br><span class="line">                <span class="comment">//<span class="doctag">TODO:</span> Child Process</span></span><br><span class="line">                close(pipefd[<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"I'm child process, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">                <span class="type">char</span> *str = <span class="string">"hello, I'm child"</span>;</span><br><span class="line">                <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                        write(pipefd[<span class="number">1</span>], str, <span class="built_in">strlen</span>(str));</span><br><span class="line">                        sleep(<span class="number">10</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">                <span class="comment">//<span class="doctag">TODO:</span> Parent process</span></span><br><span class="line">                close(pipefd[<span class="number">1</span>]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"I'm parent process, pid:%d\n"</span>, getpid());</span><br><span class="line">                <span class="comment">// pipefd[0] noblock</span></span><br><span class="line">                <span class="type">int</span> flag = fcntl(pipefd[<span class="number">0</span>], F_GETFL);</span><br><span class="line">                flag |=O_NONBLOCK;</span><br><span class="line">                fcntl(pipefd[<span class="number">0</span>], F_SETFL, flag);</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                        <span class="type">int</span> len = read(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"parent received len:%d, %s, pid:%d\n"</span>, len, buf, getpid());</span><br><span class="line">                        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                        sleep(<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="有名管道介绍及使用"><a href="#有名管道介绍及使用" class="headerlink" title="有名管道介绍及使用"></a>有名管道介绍及使用</h3><p>FIFO</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkfifo</span> $(name)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mkfifo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure></div>
<p>同样不支持lseek</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* write.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (access(<span class="string">"testfifo"</span>, F_OK|R_OK | W_OK) == <span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"file not exist\n"</span>);</span><br><span class="line">            <span class="keyword">if</span> (mkfifo(<span class="string">"testfifo"</span>, <span class="number">0664</span>)==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"mkfifo"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"file exist\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">"testfifo"</span>, O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span> (fd==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) {</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"Hello, fifo"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"write data: %s, %d\n"</span>, buf, i);</span><br><span class="line">                write(fd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* read.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> fd;</span><br><span class="line">        <span class="keyword">if</span> ( (fd=open(<span class="string">"testfifo"</span>, O_RDONLY)) == <span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">                <span class="type">int</span> len = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span> (len==<span class="number">0</span>) {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"connection lost\n"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"read received: %s\n"</span>, buf);</span><br><span class="line">        }</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>阻塞</p>
<h3 id="有名管道实现简单版聊天功能"><a href="#有名管道实现简单版聊天功能" class="headerlink" title="有名管道实现简单版聊天功能"></a>有名管道实现简单版聊天功能</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* chatA */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (access(<span class="string">"fifo1"</span>, F_OK)==<span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"filo1 not exist\n"</span>);</span><br><span class="line">                <span class="keyword">if</span> (mkfifo(<span class="string">"fifo1"</span>,<span class="number">0664</span>) ==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"mkfifo"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"fifo1 already exist\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (access(<span class="string">"fifo2"</span>, F_OK)==<span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"filo2 not exist\n"</span>);</span><br><span class="line">                <span class="keyword">if</span> (mkfifo(<span class="string">"fifo2"</span>,<span class="number">0664</span>) ==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"mkfifo"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"fifo2 already exist\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> fdw = open(<span class="string">"fifo1"</span>, O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span> (fdw==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"open fifo1\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> fdr = open(<span class="string">"fifo2"</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fdr==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"open fifo2\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                fgets(buf, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span> (write(fdw, buf, <span class="built_in">strlen</span>(buf))==<span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">                </span><br><span class="line">                <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="type">int</span> ret = read(fdr, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) {</span><br><span class="line">                        perror(<span class="string">"read"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"receive buf %s\n"</span>, buf);</span><br><span class="line">        }</span><br><span class="line">        close(fdr);</span><br><span class="line">        close(fdw);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* chatB */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (access(<span class="string">"fifo1"</span>, F_OK)==<span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"filo2 not exist\n"</span>);</span><br><span class="line">                <span class="keyword">if</span> (mkfifo(<span class="string">"fifo1"</span>,<span class="number">0664</span>) ==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"mkfifo"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"fifo1 already exist\n"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (access(<span class="string">"fifo2"</span>, F_OK)==<span class="number">-1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"filo2 not exist\n"</span>);</span><br><span class="line">                <span class="keyword">if</span> (mkfifo(<span class="string">"fifo2"</span>,<span class="number">0664</span>) ==<span class="number">-1</span>) {</span><br><span class="line">                        perror(<span class="string">"mkfifo"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"fifo2 already exist\n"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fdr = open(<span class="string">"fifo1"</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fdr==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"open fifo1\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fdw = open(<span class="string">"fifo2"</span>, O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span> (fdw==<span class="number">-1</span>) {</span><br><span class="line">                perror(<span class="string">"open"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"open fifo1\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                <span class="comment">//TODO read</span></span><br><span class="line">                <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="type">int</span> ret = read(fdr, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span> (ret&lt;=<span class="number">0</span>) {</span><br><span class="line">                        perror(<span class="string">"read"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"buf: %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//TODO write</span></span><br><span class="line">                <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                fgets(buf, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span> (write(fdw, buf, <span class="built_in">strlen</span>(buf))==<span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        close(fdr);</span><br><span class="line">        close(fdw);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>注意两个fifo的打开方式，防止都阻塞了。</strong></p>
<h3 id="内存映射-1"><a href="#内存映射-1" class="headerlink" title="内存映射(1)"></a>内存映射(1)</h3><p>可实现有血缘和无血缘关系的内存之间的通信。</p>
<blockquote>
<p>#include &lt;sys/mman.h&gt;<br>void *mmap(void <em>addr, size_t length, int prot, int flags, int fd, off_t offset);<br>int munmap(void <em>addr, size_t length); /</em> 释放内存映射 <em>/<br>/</em></em><br>mmap()  creates a new mapping in the virtual address space of the call‐<br>       ing process.  The starting address for the new mapping is specified  in<br>       addr.   The  length argument specifies the length of the mapping (which<br>       must be greater than 0).<br>       If addr is NULL, then the kernel chooses the address at which to create<br>       the  mapping;  this  is the most portable method of creating a new map‐<br>       ping.  If addr is not NULL, then the kernel takes it as  a  hint  about<br>       where  to place the mapping; on Linux, the mapping will be created at a<br>       nearby page boundary.  The address of the new mapping  is  returned  as<br>       the result of the call.<br>       The contents of a file mapping (as opposed to an anonymous mapping; see<br>       MAP_ANONYMOUS below), are initialized using length  bytes  starting  at<br>       offset  offset  in  the  file (or other object) referred to by the file<br>       descriptor fd.  offset must be a multiple of the page size as  returned<br>       by sysconf(_SC_PAGE_SIZE).<br>       The  prot  argument describes the desired memory protection of the map‐<br>       ping (and must not conflict with the open mode of  the  file).   It  is<br>       either  PROT_NONE  or  the  bitwise  OR of one or more of the following<br>       flags:<br>       PROT_EXEC  Pages may be executed.<br>       PROT_READ  Pages may be read.<br>       PROT_WRITE Pages may be written.<br>       PROT_NONE  Pages may not be accessed.<br>*/</p>
</blockquote>
<p>有血缘：在父进程中创建内存映射区<br>无血缘：创建磁盘文件，各进程得到file describor<br>内存映射区通信非阻塞</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* mmap-parent-child-ipc.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">"test.txt"</span>, O_RDWR);</span><br><span class="line">        <span class="type">int</span> size = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">        </span><br><span class="line">        <span class="type">void</span> *ptr = mmap(<span class="literal">NULL</span>, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ptr == MAP_FAILED) {</span><br><span class="line">                perror(<span class="string">"mmap"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">                <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">                <span class="built_in">strcpy</span>(buf, (<span class="type">char</span>*)ptr);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"child received data: %s\n"</span>, buf);</span><br><span class="line">                <span class="comment">// child process</span></span><br><span class="line">                <span class="built_in">strcpy</span>((<span class="type">char</span>*)ptr, <span class="string">"nihao, kid."</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        munmap(ptr, size);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="内存映射（2）"><a href="#内存映射（2）" class="headerlink" title="内存映射（2）"></a>内存映射（2）</h3><ul>
<li>如果对mmap的返回值(ptr）做++操作(ptr++），munmap是否能够成功？<br>ptr++可做操作，但munmap不成功</li>
<li>如果open时O_RDONLY，mmap时prot参数指定PROT_READ | PROT_WRITE会怎样？<br>会返回MAP_FAILED</li>
<li>如果文件偏移量为1000会怎样？<br>会失败，必须是页的整数倍</li>
<li>mmap什么情況下会调用失败？<ul>
<li>Length = 0</li>
<li>prot只有写权限 / fd与prot不匹配</li>
</ul>
</li>
<li>可以open的时候O_CREAT一个新文件来创建映射区吗？<br>可，但文件大小要拓展 lseek，trancate</li>
<li>且mmap后关闭文件描述符，对mmap映射有没有影响？<br>映射区存在，但</li>
<li>对ptr越界操作会怎样？<br>段错误<br>注意关闭顺序，小心文件过大<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// copy.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">"english.txt"</span>, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span> (fd==<span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> size = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fd2 = open(<span class="string">"cpy.txt"</span>, O_RDWR|O_CREAT, <span class="number">0664</span>);</span><br><span class="line">        <span class="keyword">if</span> (fd2==<span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        truncate(<span class="string">"cpy.txt"</span>, size);</span><br><span class="line">        write(fd2, <span class="string">" "</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span> *ptr=mmap(<span class="literal">NULL</span>, size, PROT_READ, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="type">void</span> *ptr2=mmap(<span class="literal">NULL</span>, size, PROT_READ|PROT_WRITE, MAP_SHARED, fd2, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ptr==MAP_FAILED | ptr2==MAP_FAILED) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(ptr2, ptr, size);</span><br><span class="line">        munmap(ptr2, size);</span><br><span class="line">        munmap(ptr, size);</span><br><span class="line">        close(fd2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
匿名映射，flag MAP_ANONYMOUS<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// anonymous.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">void</span>* ptr = mmap(<span class="literal">NULL</span>, <span class="number">4096</span>, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ptr == MAP_FAILED) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// parent child communication</span></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid&gt;<span class="number">0</span>) {</span><br><span class="line">                <span class="built_in">strcpy</span>((<span class="type">char</span>*)ptr, <span class="string">"Hello, child."</span>);</span><br><span class="line">                wait(<span class="literal">NULL</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (<span class="type">char</span>*)ptr);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (munmap(ptr, <span class="number">4096</span>)==<span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="信号概述"><a href="#信号概述" class="headerlink" title="信号概述"></a>信号概述</h3><p>软件中断，异步通信方式。<br>前台：stdio<br>异常：<br>系统状态变换<br>kill函数<br>特点</p>
<ul>
<li>简单</li>
<li>不能携带大量信息</li>
<li>满足特定条件才发送</li>
<li>优先级比较高<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看kill 的引用列表</span></span><br><span class="line"><span class="built_in">kill</span> -l</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>2 SIGINT<br>3 SIGQUIT<br>9 SIGKILL<br>11 SIGSEGV<br>13 SIGPIPE 管道破裂<br>17 SIGCHILD 子进程计数<br>18 SIGCONT 进程已停止使其继续运行<br>19 SIGSTOP 暂停信号的执行</p>
</blockquote>
</li>
</ul>
<p>信号的默认处理动作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man 7 signal</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Term   Default action is to terminate the process.</li>
<li>Ign    Default action is to ignore the signal.</li>
<li>Core   Default action is to terminate the process and  dump  core  (see<br>core(5)).</li>
<li>Stop   Default action is to stop the process.</li>
<li>Cont   Default  action  is  to  continue the process if it is currently<br>stopped.</li>
</ul>
<p>信号的几种状态：产生、末決、递达<br>SIGKILI 和 SIGSTOP 信号不能被捕捉、阻塞或者忽略，只能执行默认动作。</p>
<h3 id="kill、raise、abort函数"><a href="#kill、raise、abort函数" class="headerlink" title="kill、raise、abort函数"></a>kill、raise、abort函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a </span><br><span class="line"><span class="built_in">ulimit</span> -c 1024 <span class="comment">#设置core文件大小为1024</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">kill</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">If pid is positive, then signal sig is sent to the process with the  ID</span></span><br><span class="line"><span class="comment">       specified by pid.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       If pid equals 0, then sig is sent to every process in the process group</span></span><br><span class="line"><span class="comment">       of the calling process.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       If pid equals -1, then sig is sent to every process for which the call‐</span></span><br><span class="line"><span class="comment">       ing  process  has  permission  to  send  signals,  except for process 1</span></span><br><span class="line"><span class="comment">       (init), but see below.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       If pid is less than -1, then sig  is  sent  to  every  process  in  the</span></span><br><span class="line"><span class="comment">       process group whose ID is -pid.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">raise</span><span class="params">(<span class="type">int</span> sig)</span>;</span><br><span class="line"><span class="comment">/* The  raise()  function sends a signal to the calling process or thread.</span></span><br><span class="line"><span class="comment">       In a single-threaded program it is equivalent to</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">abort</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kill.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">                        sleep(<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"parent process \n"</span>);</span><br><span class="line">                sleep (<span class="number">2</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"kill child process now\n"</span>);</span><br><span class="line">                kill(pid, SIGINT);</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="alarm-函数"><a href="#alarm-函数" class="headerlink" title="alarm 函数"></a>alarm 函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br><span class="line"><span class="comment">// 如果seconds为0，参数无效，不发信号</span></span><br></pre></td></tr></table></figure></div>
<p>不阻塞</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// alarm.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> seconds = alarm(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seconds: %d\n"</span>, seconds);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        seconds = alarm(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seconds: %d\n"</span>, seconds);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        }</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// alarm1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> seconds = alarm(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i++);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="setitimer-定时器函数"><a href="#setitimer-定时器函数" class="headerlink" title="setitimer 定时器函数"></a>setitimer 定时器函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getitimer</span><span class="params">(<span class="type">int</span> which, <span class="keyword">struct</span> itimerval *curr_value)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setitimer</span><span class="params">(<span class="type">int</span> which, <span class="type">const</span> <span class="keyword">struct</span> itimerval *new_value,</span></span><br><span class="line"><span class="params">             <span class="keyword">struct</span> itimerval *old_value)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setitimer.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">new_value</span>;</span></span><br><span class="line">    new_value.it_interval.tv_sec = <span class="number">2</span>;</span><br><span class="line">    new_value.it_interval.tv_usec = <span class="number">0</span>;</span><br><span class="line">    new_value.it_value.tv_sec = <span class="number">3</span>;</span><br><span class="line">    new_value.it_value.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = setitimer(ITIMER_REAL, &amp;new_value, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Itimer start.\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"setitimer"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="signal-信号捕捉函数"><a href="#signal-信号捕捉函数" class="headerlink" title="signal 信号捕捉函数"></a>signal 信号捕捉函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">sighandler_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">sighandler_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">sighandler_t</span> handler)</span>;</span><br><span class="line"><span class="comment">/* The signals SIGKILL and SIGSTOP cannot be caught or ignored. */</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* signal.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * alarm Handler</span></span><br><span class="line"><span class="comment"> * @param num signal caught</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myalarmHandler</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"catch signal:%d\n"</span>, num);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// signal(SIGALRM, SIG_IGN);</span></span><br><span class="line">    signal(SIGALRM, myalarmHandler);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">new_value</span>;</span></span><br><span class="line">    new_value.it_interval.tv_sec = <span class="number">2</span>;</span><br><span class="line">    new_value.it_interval.tv_usec = <span class="number">0</span>;</span><br><span class="line">    new_value.it_value.tv_sec = <span class="number">3</span>;</span><br><span class="line">    new_value.it_value.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = setitimer(ITIMER_REAL, &amp;new_value, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Itimer start.\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"setitimer"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="信号集及相关函数"><a href="#信号集及相关函数" class="headerlink" title="信号集及相关函数"></a>信号集及相关函数</h3><p>许多信号相关的系统调用都需要能表示一组不同的信号，多个信号可使用一个称之为信号集的数据结构来表示，其系统数据类型为 sigset_t。<br>在PCB 中有两个非常重要的信号集。一个称之为 “阻塞信号集”，另一个称之为 “未决信号集”。这两个信号集都是内核使用位图机制来实现的。但操作系统不允许我们直接对这两个信号集进行位操作。而需自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改。<br>未决、阻塞</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigemptyset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    sigemptyset(&amp;<span class="built_in">set</span>);</span><br><span class="line">    <span class="type">int</span> ret = sigismember(&amp;<span class="built_in">set</span>, SIGINT);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"SIGINT not block\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"SIGINT block\n"</span>);</span><br><span class="line">        sigaddset(&amp;<span class="built_in">set</span>, SIGINT);</span><br><span class="line">        sigaddset(&amp;<span class="built_in">set</span>, SIGQUIT);</span><br><span class="line">        ret = sigismember(&amp;<span class="built_in">set</span>, SIGINT);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"SIGINT not block\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"SIGINT block\n"</span>);</span><br><span class="line"></span><br><span class="line">        sigdelset(&amp;<span class="built_in">set</span>, SIGQUIT);</span><br><span class="line">        ret = sigismember(&amp;<span class="built_in">set</span>, SIGQUIT);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"SIGQUIT not block\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"SIGQUIT block\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="sigprocmask-函数使用"><a href="#sigprocmask-函数使用" class="headerlink" title="sigprocmask 函数使用"></a>sigprocmask 函数使用</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sigprocmask</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Prototype for the glibc wrapper function */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigprocmask</span><span class="params">(<span class="type">int</span> how, <span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">sigset_t</span> *oldset)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sigprocmask.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    sigaddset(&amp;<span class="built_in">set</span>, SIGINT);</span><br><span class="line">    sigaddset(&amp;<span class="built_in">set</span>, SIGQUIT);</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        num++;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="type">sigset_t</span> pendingset;</span><br><span class="line">        sigemptyset(&amp;pendingset);</span><br><span class="line">        sigpending(&amp;pendingset);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (sigismember(&amp;pendingset, i)==<span class="number">1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (num==<span class="number">10</span>) {</span><br><span class="line">            sigprocmask(SIG_UNBLOCK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="sigaction-信号捕捉函数"><a href="#sigaction-信号捕捉函数" class="headerlink" title="sigaction 信号捕捉函数"></a>sigaction 信号捕捉函数</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigaction</span><span class="params">(<span class="type">int</span> signum, <span class="type">const</span> <span class="keyword">struct</span> sigaction *act,</span></span><br><span class="line"><span class="params">             <span class="keyword">struct</span> sigaction *oldact)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* sigaction.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * alarm Handler</span></span><br><span class="line"><span class="comment"> * @param num signal caught</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myalarmHandler</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"catch signal:%d\n"</span>, num);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// signal(SIGALRM, SIG_IGN);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    act.sa_handler = myalarmHandler; </span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    sigaction(SIGALRM, &amp;act, <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">new_value</span>;</span></span><br><span class="line">    new_value.it_interval.tv_sec = <span class="number">2</span>;</span><br><span class="line">    new_value.it_interval.tv_usec = <span class="number">0</span>;</span><br><span class="line">    new_value.it_value.tv_sec = <span class="number">3</span>;</span><br><span class="line">    new_value.it_value.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = setitimer(ITIMER_REAL, &amp;new_value, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Itimer start.\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"setitimer"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="SIGCHLD-信号"><a href="#SIGCHLD-信号" class="headerlink" title="SIGCHLD 信号"></a>SIGCHLD 信号</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sigchld.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFun</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"caught signal: %d\n"</span>, num);</span><br><span class="line">    <span class="comment">//TO DO</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> ret = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">        <span class="keyword">if</span> (ret&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"caught child %d\n"</span>, ret);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ret==<span class="number">0</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"caught no child process\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">//block signal before fork, in case child process died before signal registration.</span></span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    sigemptyset(&amp;<span class="built_in">set</span>);</span><br><span class="line">    sigaddset(&amp;<span class="built_in">set</span>, SIGCHLD);</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) {</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid&gt;<span class="number">0</span>) {</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">        act.sa_flags = <span class="number">0</span>;</span><br><span class="line">        act.sa_handler = myFun;</span><br><span class="line">        sigemptyset(&amp;act.sa_mask);</span><br><span class="line">        sigaction(SIGCHLD, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line">        sigprocmask(SIG_UNBLOCK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"I'm parent process, pid:%d\n"</span>, getpid());</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) == <span class="number">-1</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"All child died.\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I'm child prcess, pid:%d, ppid:%d\n"</span>, getpid(), getppid());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="共享内存（1）"><a href="#共享内存（1）" class="headerlink" title="共享内存（1）"></a>共享内存（1）</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">shmget()</span><br><span class="line">shmat()</span><br><span class="line">shmdt() <span class="comment">// 进程终止时会自动完成这一步</span></span><br><span class="line">shmctl() <span class="comment">//删除共享内存(只时标记删除，当引用数为0时才正真删除）</span></span><br></pre></td></tr></table></figure></div>

<h3 id="共享内存-2"><a href="#共享内存-2" class="headerlink" title="共享内存(2)"></a>共享内存(2)</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipcs -m</span><br><span class="line">ipcrm </span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// read_shm.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> shmid = shmget(<span class="number">1000</span>, <span class="number">4096</span>, IPC_CREAT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shmid:%d\n"</span>, shmid);</span><br><span class="line">    <span class="type">void</span> *ptr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (<span class="type">char</span>*)ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"continue with pressing any char:\n"</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    shmdt(ptr);</span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// write_shm.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> shmid = shmget(<span class="number">1000</span>, <span class="number">4096</span>, IPC_CREAT|<span class="number">0664</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shmid:%d\n"</span>, shmid);</span><br><span class="line">    <span class="type">void</span> *ptr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span> *str = <span class="string">"helloworld"</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr, str, <span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"continue with pressing any char:\n"</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    shmdt(ptr);</span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>共享内存 vs. 内存映射<br>突然退出：共享内存还存在，内存映射消失<br>宕机：共享内存消失，内存映射的硬盘存在<br>生命周期：</p>
<h3 id="守护进程（1）"><a href="#守护进程（1）" class="headerlink" title="守护进程（1）"></a>守护进程（1）</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> $$</span><br><span class="line"><span class="built_in">tty</span></span><br></pre></td></tr></table></figure></div>

<p>会话：共享控制终端<br>前台、后台终端<br>PID， PPID，PGID，SID<br>首进程（bash）PID=SID<br>任意时刻只能有一个前台进程组</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">getpgrp</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">getpgid</span><span class="params">(<span class="type">pid_t</span> pid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setpgid</span> <span class="params">(<span class="type">pid_t</span> pid, <span class="type">pid_t</span> pgid)</span>;</span><br><span class="line">pid t <span class="title function_">getsid</span><span class="params">(<span class="type">pid_t</span> pid)</span>;</span><br><span class="line">pid t <span class="title function_">setsid</span> <span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>Daemon Process<br>后台进程，通常独立于控制终端</p>
<h3 id="守护进程（2）"><a href="#守护进程（2）" class="headerlink" title="守护进程（2）"></a>守护进程（2）</h3><ul>
<li>执行一个fork（)．之后父进程退出，子进程继续执行。</li>
<li>子逬程调用setsid ()」开一个新会活。</li>
<li>清除进程的umask以确保当守护进程创建文件和目录时拥有所需的权限。</li>
<li>修改进程的当前工作目录，通常会改为根目录(1。</li>
<li>关闭守护进程从其父进程继承而来的所有打开着的文件描述符。</li>
<li>在关閉了文件描述行0、1、2之后，守程通常会才升/dev/nur」 井使用dup2(）</li>
<li>使所有这些描述符指向这个设备。</li>
<li>核心业务逻辑<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// daemon.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    写一个守护进程，每隔2s获取一下系统时间，将这个时间写入到磁盘文件中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="comment">// 捕捉到信号之后，获取系统时间，写入磁盘文件</span></span><br><span class="line">    <span class="type">time_t</span> tm = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> * <span class="title">loc</span> =</span> localtime(&amp;tm);</span><br><span class="line">    <span class="comment">// char buf[1024];</span></span><br><span class="line">    <span class="comment">// sprintf(buf, "%d-%d-%d %d:%d:%d\n",loc-&gt;tm_year,loc-&gt;tm_mon</span></span><br><span class="line">    <span class="comment">// ,loc-&gt;tm_mday, loc-&gt;tm_hour, loc-&gt;tm_min, loc-&gt;tm_sec);</span></span><br><span class="line">    <span class="comment">// printf("%s\n", buf);</span></span><br><span class="line">    <span class="type">char</span> * str = asctime(loc);</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/Users/meqt/Documents/Xcode/Cpp/SoftWareCourse/Lesson28/time.txt"</span>, O_RDWR | O_CREAT | O_APPEND, <span class="number">0664</span>);</span><br><span class="line">    write(fd ,str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    close(fd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// 1.创建子进程，退出父进程</span></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 2.将子进程重新创建一个会话</span></span><br><span class="line">    setsid();</span><br><span class="line">    <span class="comment">// 3.设置掩码</span></span><br><span class="line">    umask(<span class="number">022</span>);</span><br><span class="line">    <span class="comment">// 4.更改工作目录</span></span><br><span class="line">    chdir(<span class="string">"/"</span>);</span><br><span class="line">    <span class="comment">// 5. 关闭、重定向文件描述符</span></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/dev/null"</span>, O_RDWR);</span><br><span class="line">    dup2(fd, STDIN_FILENO);</span><br><span class="line">    dup2(fd, STDOUT_FILENO);</span><br><span class="line">    dup2(fd, STDERR_FILENO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.业务逻辑</span></span><br><span class="line">    <span class="comment">// 捕捉定时信号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    act.sa_handler = work;</span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    sigaction(SIGALRM, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">val</span>;</span></span><br><span class="line">    val.it_value.tv_sec = <span class="number">2</span>;</span><br><span class="line">    val.it_value.tv_usec = <span class="number">0</span>;</span><br><span class="line">    val.it_interval.tv_sec = <span class="number">2</span>;</span><br><span class="line">    val.it_interval.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    setitimer(ITIMER_REAL, &amp;val, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 不让进程结束</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) {</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
